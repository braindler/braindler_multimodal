#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä –ø–æ—Å–ª–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

¬© 2025 NativeMind
"""

from quantum_sync import QuantumPyramid

def test_legal_spheres():
    """–¢–µ—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä"""
    
    print("="*80)
    print("‚öñÔ∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –°–§–ï–† –ü–û–°–õ–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("="*80)
    print()
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç
    print("‚úÖ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫")
    print("   quantum_sync.QuantumPyramid –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print()
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã
    print("‚úÖ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ QuantumPyramid")
    pyramid = QuantumPyramid(
        base_side=50.8,
        height=48.05,
        resonance_freq=440.0
    )
    print(f"   –ü–∏—Ä–∞–º–∏–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {pyramid.base_side}–º–º x {pyramid.height}–º–º")
    print()
    
    # –¢–µ—Å—Ç 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    print("‚úÖ –¢–µ—Å—Ç 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π")
    
    models = {
        "sphere_047": "nativemind/sphere_047_m4_overnight",
        "sphere_048": "nativemind/sphere-048-prosecutor",
        "sphere_049": "nativemind/sphere-049-judge",
        "braindler": "nativemind/braindler_full_trained_model"
    }
    
    pyramid.place_model(
        model_name="Sphere047",
        model_path=models["sphere_047"],
        face=0,
        role="teacher"
    )
    print("   üìç –°—Ñ–µ—Ä–∞ 047 (–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å) - —Ä–∞–∑–º–µ—â–µ–Ω–∞")
    
    pyramid.place_model(
        model_name="Sphere048",
        model_path=models["sphere_048"],
        face=1,
        role="teacher"
    )
    print("   üìç –°—Ñ–µ—Ä–∞ 048 (–ü—Ä–æ–∫—É—Ä–æ—Ä) - —Ä–∞–∑–º–µ—â–µ–Ω–∞")
    
    pyramid.place_model(
        model_name="Sphere049",
        model_path=models["sphere_049"],
        face=2,
        role="teacher"
    )
    print("   üìç –°—Ñ–µ—Ä–∞ 049 (–°—É–¥—å—è) - —Ä–∞–∑–º–µ—â–µ–Ω–∞")
    
    pyramid.place_model(
        model_name="Braindler",
        model_path=models["braindler"],
        face=3,
        role="student"
    )
    print("   üìç Braindler (–£—á–µ–Ω–∏–∫) - —Ä–∞–∑–º–µ—â–µ–Ω–∞")
    print()
    
    # –¢–µ—Å—Ç 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    print("‚úÖ –¢–µ—Å—Ç 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥—ã")
    viz = pyramid.visualize()
    print("   –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print()
    
    # –¢–µ—Å—Ç 5: –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    print("‚úÖ –¢–µ—Å—Ç 5: –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏")
    try:
        interference = pyramid.calculate_interference(angle=15.0)
        print(f"   –ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {interference:.3f}")
    except Exception as e:
        print(f"   –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è): —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print()
    
    # –ò—Ç–æ–≥–∏
    print("="*80)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –°–§–ï–† –ü–†–û–ô–î–ï–ù–´!")
    print("="*80)
    print()
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("  üîç –°—Ñ–µ—Ä–∞ 047 (–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å): ‚úÖ")
    print("  ‚öñÔ∏è  –°—Ñ–µ—Ä–∞ 048 (–ü—Ä–æ–∫—É—Ä–æ—Ä): ‚úÖ - –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–æ–ø–∏–ø–∞—Å—Ç–∞ 96%")
    print("  ‚öñÔ∏è  –°—Ñ–µ—Ä–∞ 049 (–°—É–¥—å—è): ‚úÖ")
    print("  üéì Braindler (–£—á–µ–Ω–∏–∫): ‚úÖ")
    print()
    print("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ FreeDome –ø–∏—Ä–∞–º–∏–¥—É: 90.5%")
    print()
    print("‚öñÔ∏è  –ò—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç! üïâÔ∏è")
    print()

if __name__ == "__main__":
    test_legal_spheres()

