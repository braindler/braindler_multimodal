"""
OCR Engine –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö

–û—Å–æ–±—ã–π —Ñ–æ–∫—É—Å –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Å–∫–∞–Ω—ã —É–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª)
–°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
from typing import Union, List, Dict, Optional
from PIL import Image
import pytesseract
from pdf2image import convert_from_path
import fitz  # PyMuPDF


class OCREngine:
    """
    OCR –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    
    –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: 
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª—É–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
    """
    
    def __init__(
        self,
        languages: List[str] = None,
        dpi: int = 300,
        use_easyocr: bool = False,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR Engine
        
        Args:
            languages: –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ['rus', 'eng'])
            dpi: DPI –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            use_easyocr: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EasyOCR (–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π, –ª—É—á—à–µ –¥–ª—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        """
        if languages is None:
            languages = ['rus', 'eng']  # –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        self.languages = '+'.join(languages)
        self.dpi = dpi
        self.use_easyocr = use_easyocr
        
        if use_easyocr:
            try:
                import easyocr
                self.easyocr_reader = easyocr.Reader(languages)
                print("   ‚úÖ EasyOCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except ImportError:
                print("   ‚ö†Ô∏è  EasyOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Tesseract")
                self.use_easyocr = False
        
        print(f"   ‚úÖ OCR Engine –≥–æ—Ç–æ–≤ (—è–∑—ã–∫–∏: {', '.join(languages)})")
    
    def extract_text_from_image(
        self,
        image: Union[str, Image.Image],
        preserve_layout: bool = True,
    ) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ PIL.Image
            preserve_layout: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if isinstance(image, str):
            img = Image.open(image)
        else:
            img = image
        
        # OCR
        if self.use_easyocr:
            # EasyOCR (–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π)
            results = self.easyocr_reader.readtext(img)
            text = '\n'.join([result[1] for result in results])
        else:
            # Tesseract OCR
            if preserve_layout:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                text = pytesseract.image_to_string(
                    img,
                    lang=self.languages,
                    config='--psm 6'  # Assume uniform block of text
                )
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                text = pytesseract.image_to_string(img, lang=self.languages)
        
        return text.strip()
    
    def extract_text_from_pdf(
        self,
        pdf_path: str,
        preserve_layout: bool = True,
        start_page: int = 0,
        end_page: Optional[int] = None,
    ) -> Dict[int, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ)
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            preserve_layout: –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            start_page: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (0-indexed)
            end_page: –ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (None = –¥–æ –∫–æ–Ω—Ü–∞)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã: —Ç–µ–∫—Å—Ç}
        """
        results = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ PDF —Ç–µ–∫—Å—Ç–æ–≤—ã–π)
        try:
            doc = fitz.open(pdf_path)
            has_text = False
            
            for page_num in range(len(doc)):
                if end_page is not None and page_num >= end_page:
                    break
                if page_num < start_page:
                    continue
                
                page = doc[page_num]
                text = page.get_text()
                
                if text.strip():
                    has_text = True
                    results[page_num] = text
            
            doc.close()
            
            if has_text:
                print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ PDF –Ω–∞–ø—Ä—è–º—É—é ({len(results)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                return results
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, OCR –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF
        print(f"   üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (DPI: {self.dpi})...")
        
        images = convert_from_path(
            pdf_path,
            dpi=self.dpi,
            first_page=start_page + 1,  # convert_from_path uses 1-indexed
            last_page=end_page if end_page else None,
        )
        
        print(f"   üîç OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        for i, image in enumerate(images):
            page_num = start_page + i
            text = self.extract_text_from_image(image, preserve_layout)
            results[page_num] = text
            
            if (i + 1) % 10 == 0:
                print(f"      –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        print(f"   ‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω ({len(results)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
        
        return results
    
    def extract_structured_data(
        self,
        image: Union[str, Image.Image]
    ) -> Dict[str, any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Returns:
            {
                'text': –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç,
                'lines': —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫,
                'words': —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤,
                'confidence': —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            }
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if isinstance(image, str):
            img = Image.open(image)
        else:
            img = image
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OCR
        data = pytesseract.image_to_data(
            img,
            lang=self.languages,
            output_type=pytesseract.Output.DICT
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
        words = []
        confidences = []
        
        for i in range(len(data['text'])):
            if data['text'][i].strip():
                words.append({
                    'text': data['text'][i],
                    'confidence': data['conf'][i],
                    'bbox': (
                        data['left'][i],
                        data['top'][i],
                        data['width'][i],
                        data['height'][i]
                    )
                })
                confidences.append(data['conf'][i])
        
        # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        full_text = ' '.join([w['text'] for w in words])
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        avg_confidence = sum(confidences) / len(confidences) if confidences else 0
        
        return {
            'text': full_text,
            'words': words,
            'confidence': avg_confidence,
        }
    
    def batch_process_pdfs(
        self,
        pdf_paths: List[str],
        output_dir: Optional[str] = None,
    ) -> Dict[str, Dict[int, str]]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF —Ñ–∞–π–ª–æ–≤
        
        Args:
            pdf_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ PDF
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            {pdf_name: {page_num: text}}
        """
        all_results = {}
        
        for pdf_path in pdf_paths:
            pdf_name = os.path.basename(pdf_path)
            print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_name}")
            
            try:
                results = self.extract_text_from_pdf(pdf_path)
                all_results[pdf_name] = results
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                if output_dir:
                    os.makedirs(output_dir, exist_ok=True)
                    output_file = os.path.join(
                        output_dir,
                        f"{pdf_name}_ocr.txt"
                    )
                    
                    with open(output_file, 'w', encoding='utf-8') as f:
                        for page_num in sorted(results.keys()):
                            f.write(f"\n{'='*60}\n")
                            f.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}\n")
                            f.write(f"{'='*60}\n\n")
                            f.write(results[page_num])
                            f.write('\n')
                    
                    print(f"   üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {pdf_name}: {e}")
                all_results[pdf_name] = {}
        
        return all_results

