"""
Vision Encoder –Ω–∞ –±–∞–∑–µ CLIP

–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏

¬© 2025 NativeMind - NativeMindNONC License
"""

import torch
from typing import Union
from PIL import Image
from transformers import CLIPVisionModel, CLIPImageProcessor


class VisionEncoder:
    """
    Vision Encoder –Ω–∞ –æ—Å–Ω–æ–≤–µ CLIP
    
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    """
    
    def __init__(self, model_name: str = "openai/clip-vit-large-patch14"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vision Encoder
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ CLIP –º–æ–¥–µ–ª–∏ –∏–∑ HuggingFace
        """
        print(f"   üì• –ó–∞–≥—Ä—É–∑–∫–∞ CLIP vision model: {model_name}")
        
        self.model = CLIPVisionModel.from_pretrained(model_name)
        self.processor = CLIPImageProcessor.from_pretrained(model_name)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ eval —Ä–µ–∂–∏–º
        self.model.eval()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        self.embedding_dim = self.model.config.hidden_size
        
        print(f"   ‚úÖ CLIP –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {self.embedding_dim}")
    
    def get_embedding_dim(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"""
        return self.embedding_dim
    
    def encode(self, image: Union[str, Image.Image]) -> torch.Tensor:
        """
        –ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥
        
        Args:
            image: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ PIL.Image
            
        Returns:
            Tensor —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ [1, embedding_dim]
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å
        if isinstance(image, str):
            image = Image.open(image).convert("RGB")
        elif not isinstance(image, Image.Image):
            raise ValueError("image –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–±–æ –ø—É—Ç—ë–º –∫ —Ñ–∞–π–ª—É, –ª–∏–±–æ PIL.Image")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        inputs = self.processor(images=image, return_tensors="pt")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        with torch.no_grad():
            outputs = self.model(**inputs)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pooler_output (CLS token)
            image_embedding = outputs.pooler_output
        
        return image_embedding
    
    def encode_batch(self, images: list) -> torch.Tensor:
        """
        –ü–∞–∫–µ—Ç–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            images: –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø—É—Ç–∏ –∏–ª–∏ PIL.Image)
            
        Returns:
            Tensor —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ [batch_size, embedding_dim]
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pil_images = []
        for img in images:
            if isinstance(img, str):
                pil_images.append(Image.open(img).convert("RGB"))
            elif isinstance(img, Image.Image):
                pil_images.append(img)
            else:
                raise ValueError("–ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Ç—ë–º –∏–ª–∏ PIL.Image")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç
        inputs = self.processor(images=pil_images, return_tensors="pt")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        with torch.no_grad():
            outputs = self.model(**inputs)
            image_embeddings = outputs.pooler_output
        
        return image_embeddings
    
    def to(self, device: str):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        self.model = self.model.to(device)
        return self
    
    def __call__(self, image: Union[str, Image.Image]) -> torch.Tensor:
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é"""
        return self.encode(image)



