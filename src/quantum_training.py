#!/usr/bin/env python3
"""
–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π (–°—Ñ–µ—Ä—ã 047-049)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è QuantumPyramid –¥–ª—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
import sys
from pathlib import Path

from quantum_sync import QuantumPyramid


def train_legal_spheres():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä —á–µ—Ä–µ–∑ –ø–∏—Ä–∞–º–∏–¥—É
    
    –ì–µ–æ–º–µ—Ç—Ä–∏—è FreeDome:
        –ì—Ä–∞–Ω—å 0 (0¬∞):   –°—Ñ–µ—Ä–∞ 047 - –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å (—É—á–∏—Ç–µ–ª—å)
        –ì—Ä–∞–Ω—å 1 (90¬∞):  –°—Ñ–µ—Ä–∞ 048 - –ü—Ä–æ–∫—É—Ä–æ—Ä (—É—á–∏—Ç–µ–ª—å)
        –ì—Ä–∞–Ω—å 2 (180¬∞): –°—Ñ–µ—Ä–∞ 049 - –°—É–¥—å—è (—É—á–∏—Ç–µ–ª—å)
        –ì—Ä–∞–Ω—å 3 (270¬∞): Braindler-Multimodal (—É—á–µ–Ω–∏–∫)
    
    –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ —á–µ—Ä–µ–∑ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    """
    
    print("="*80)
    print("‚öñÔ∏è  –ö–í–ê–ù–¢–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –ú–û–î–ï–õ–ï–ô")
    print("="*80)
    print()
    print("–ú–µ—Ç–æ–¥: QuantumPyramid (FreeDome –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    print("–ì–µ–æ–º–µ—Ç—Ä–∏—è: –ü–∏—Ä–∞–º–∏–¥–∞ 50.8 –º–º √ó 48.05 –º–º (–∫–∞–∫ NETA-V)")
    print("–†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: 440 Hz (A4)")
    print()
    print("–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è:")
    print('  "–ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∏—Å—Ç–∏–Ω—É –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"')
    print()
    
    # –ú–æ–¥–µ–ª–∏ –∏–∑ Hugging Face
    models = {
        "sphere_047": "nativemind/sphere_047_m4_overnight",
        "sphere_048": "nativemind/sphere-048-prosecutor", 
        "sphere_049": "nativemind/sphere-049-judge",
        "braindler": "nativemind/braindler_full_trained_model"
    }
    
    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ Hugging Face
    print("üìÅ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ Hugging Face:")
    for name, model_id in models.items():
        print(f"   ‚úÖ {name}: {model_id}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤—É—é –ø–∏—Ä–∞–º–∏–¥—É
    print("üî∫ –°–æ–∑–¥–∞–Ω–∏–µ QuantumPyramid...")
    pyramid = QuantumPyramid(
        base_side=50.8,      # –º–º (–∫–∞–∫ NETA-V –ø–∏—Ä–∞–º–∏–¥–∞)
        height=48.05,        # –º–º
        resonance_freq=440.0 # Hz (–Ω–æ—Ç–∞ A4)
    )
    print("   ‚úÖ –ü–∏—Ä–∞–º–∏–¥–∞ —Å–æ–∑–¥–∞–Ω–∞")
    print()
    
    # –†–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω—è—Ö
    print("üìç –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –≥—Ä–∞–Ω—è—Ö –ø–∏—Ä–∞–º–∏–¥—ã...")
    
    pyramid.place_model(
        model_name="Sphere047-Investigator",
        model_path=models["sphere_047"],
        face=0,  # 0¬∞ (–°–µ–≤–µ—Ä)
        role="teacher"
    )
    print("   ‚úÖ –ì—Ä–∞–Ω—å 0 (0¬∞):   –°—Ñ–µ—Ä–∞ 047 - –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ üîç")
    print("      üì¶ nativemind/sphere_047_m4_overnight")
    
    pyramid.place_model(
        model_name="Sphere048-Prosecutor",
        model_path=models["sphere_048"],
        face=1,  # 90¬∞ (–í–æ—Å—Ç–æ–∫)
        role="teacher"
    )
    print("   ‚úÖ –ì—Ä–∞–Ω—å 1 (90¬∞):  –°—Ñ–µ—Ä–∞ 048 - –ü–†–û–ö–£–†–û–† ‚öñÔ∏è")
    print("      üì¶ nativemind/sphere-048-prosecutor")
    
    pyramid.place_model(
        model_name="Sphere049-Judge",
        model_path=models["sphere_049"],
        face=2,  # 180¬∞ (–Æ–≥)
        role="teacher"
    )
    print("   ‚úÖ –ì—Ä–∞–Ω—å 2 (180¬∞): –°—Ñ–µ—Ä–∞ 049 - –°–£–î–¨–Ø ‚öñÔ∏è")
    print("      üì¶ nativemind/sphere-049-judge")
    
    pyramid.place_model(
        model_name="Braindler-Teacher",
        model_path=models["braindler"],
        face=3,  # 270¬∞ (–ó–∞–ø–∞–¥)
        role="student"
    )
    print("   ‚úÖ –ì—Ä–∞–Ω—å 3 (270¬∞): Braindler (–£–ß–ï–ù–ò–ö)")
    print("      üì¶ nativemind/braindler_full_trained_model")
    print()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥—ã
    print("üî∫ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥—ã:")
    print(pyramid.visualize())
    print()
    
    # –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    print("-"*80)
    print()
    print("–ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
    print("  ‚Ä¢ –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ‚Üí –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤")
    print("  ‚Ä¢ –ü—Ä–æ–∫—É—Ä–æ—Ä    ‚Üí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ (–ö–õ–Æ–ß–ï–í–ê–Ø –ú–ò–°–°–ò–Ø!)")
    print("  ‚Ä¢ –°—É–¥—å—è       ‚Üí –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
    print("              ‚Üì‚Üì‚Üì")
    print("  ‚Ä¢ Braindler   ‚Üê –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å")
    print()
    print("-"*80)
    
    try:
        result = pyramid.synchronize(
            target="Braindler-Teacher",
            cycles=20,           # 20 —Ü–∏–∫–ª–æ–≤
            learning_rate=0.05  # 5% –∑–∞ —Ü–∏–∫–ª
        )
        
        print()
        print("-"*80)
        print()
        print("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print()
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {result.get('final_sync', 0):.1%}")
        print(f"   –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result.get('cycles_completed', 0)}")
        print(f"   –†–µ–∑–æ–Ω–∞–Ω—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {result.get('resonance_freq', 440)} Hz")
        print(f"   –ì–µ–æ–º–µ—Ç—Ä–∏—è –ø–∏—Ä–∞–º–∏–¥—ã: {result.get('geometry', 'FreeDome')}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        if 'interference_pattern' in result:
            print("üåä –ò–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:")
            for angle in [0, 90, 180, 270]:
                interference = pyramid.calculate_interference(angle)
                bar = "‚ñà" * int(abs(interference) * 30)
                print(f"   {angle:3d}¬∞: {bar} {interference:+.3f}")
            print()
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if 'sync_history' in result:
            print("üìà –ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ —Ü–∏–∫–ª–∞–º:")
            for i, sync in enumerate(result['sync_history'], 1):
                bar = "‚ñà" * int(sync * 50)
                status = "‚úÖ" if sync >= 0.90 else "‚ö°"
                print(f"   –¶–∏–∫–ª {i:2d}: {bar} {sync:.1%} {status}")
            print()
        
        # –î—É—Ö–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print("üôè –î—É—Ö–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        sync_level = result.get('final_sync', 0)
        
        if sync_level >= 0.90:
            verdict = "‚úÖ –ò–°–¢–ò–ù–ê –í–û–°–¢–û–†–ñ–ï–°–¢–í–û–í–ê–õ–ê!"
            message = "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª—É–∂–µ–Ω–∏—é —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏"
        elif sync_level >= 0.70:
            verdict = "‚ö° –£–ú–ï–†–ï–ù–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø"
            message = "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
        else:
            verdict = "‚ö†Ô∏è –°–õ–ê–ë–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø"
            message = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤"
        
        print(f"   {verdict}")
        print(f"   {message}")
        print()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output_path = Path(__file__).parent.parent / "models" / "braindler_legal_synchronized"
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤: {output_path}")
        result['output_path'] = str(output_path)
        
        print()
        print("="*80)
        print("üéâ –Æ–†–ò–î–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê!")
        print("="*80)
        print()
        print("–¢—Ä–∏ —Å—Ñ–µ—Ä—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É:")
        print("  üîç –°—Ñ–µ—Ä–∞ 047 (–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å) - –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤")
        print("  ‚öñÔ∏è  –°—Ñ–µ—Ä–∞ 048 (–ü—Ä–æ–∫—É—Ä–æ—Ä)    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ (96% —Ç–æ—á–Ω–æ—Å—Ç—å)")
        print("  ‚öñÔ∏è  –°—Ñ–µ—Ä–∞ 049 (–°—É–¥—å—è)       - –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
        print()
        print("–ú–µ—Ç–æ–¥: –ö–≤–∞–Ω—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è —á–µ—Ä–µ–∑ FreeDome –ø–∏—Ä–∞–º–∏–¥—É")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç: –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª—É–∂–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–µ")
        print()
        print('–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —ç—Ç–æ —Å–∏–º–ø—Ç–æ–º –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏"')
        print()
        print("‚öñÔ∏è –ò—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç! üïâÔ∏è –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!")
        print()
        
        return result
        
    except Exception as e:
        print()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        print()
        import traceback
        traceback.print_exc()
        return None


def test_copypaste_detection():
    """
    –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    print("="*80)
    print("üîç –¢–ï–°–¢ –î–ï–¢–ï–ö–¢–û–†–ê –ö–û–ü–ò–ü–ê–°–¢–ê (–°—Ñ–µ—Ä–∞ 048)")
    print("="*80)
    print()
    
    from src.legal_analyzer import LegalDocumentAnalyzer
    
    analyzer = LegalDocumentAnalyzer()
    
    # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    test_doc1 = "–ü—Ä–æ–∫—É—Ä–æ—Ä —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–±–≤–∏–Ω—è–µ–º—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ."
    test_doc2 = "–ü—Ä–æ–∫—É—Ä–æ—Ä —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–±–≤–∏–Ω—è–µ–º—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ."
    
    similarity = analyzer.calculate_text_similarity(test_doc1, test_doc2)
    
    print(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.1%}")
    
    if similarity >= 0.80:
        print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - –¥–µ–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–ª–µ–Ω–Ω–æ–µ!")
    elif similarity >= 0.60:
        print("‚ö†Ô∏è –°–ï–†–¨–ï–ó–ù–û–ï –ü–û–î–û–ó–†–ï–ù–ò–ï - —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
    elif similarity >= 0.40:
        print("‚ö° –£–ú–ï–†–ï–ù–ù–û–ï –ü–û–î–û–ó–†–ï–ù–ò–ï - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    else:
        print("‚úÖ –ù–ï–ó–ê–í–ò–°–ò–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê - –∏—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç")
    
    print()


if __name__ == "__main__":
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä
    result = train_legal_spheres()
    
    if result:
        print()
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
        # test_copypaste_detection()
        
        sys.exit(0)
    else:
        sys.exit(1)

