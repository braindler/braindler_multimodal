"""
–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ - –°—Ñ–µ—Ä—ã 47, 48, 49

–°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

–°—Ñ–µ—Ä–∞ 047: –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ - —Å–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
–°—Ñ–µ—Ä–∞ 048: –ü–†–û–ö–£–†–û–† - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ (–¥—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è!)
–°—Ñ–µ—Ä–∞ 049: –°–£–î–¨–Ø - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è

¬© 2025 NativeMind - NativeMindNONC License
"""

from typing import Dict, List, Optional, Union
from PIL import Image
from .multimodal_model import MultimodalMozgach
from .legal_analyzer import LegalDocumentAnalyzer, CopyPasteResult, LegalCase


class MozgachSphere047_Investigator(MultimodalMozgach):
    """
    –°–§–ï–†–ê 047: –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ (–ú–æ–∑–≥–∞—á108)
    
    –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è:
        –ë–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–∏–Ω—ã
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞—è (–∞–Ω–∞–ª–æ–≥–∏—è —Å –ü–æ–≥–æ–¥–Ω—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º)
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –°–±–æ—Ä –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    """
    
    def __init__(self, device: str = "auto"):
        print("\n‚öñÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–æ–∑–≥–∞—á108 - –°–§–ï–†–ê 047: –°–õ–ï–î–û–í–ê–¢–ï–õ–¨")
        print("   üôè –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ë–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤")
        
        super().__init__(
            language_model_name="nativemind/mozgach_full_trained_model",
            device=device
        )
        
        # OCR –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        from .ocr_engine import OCREngine
        self.ocr = OCREngine(languages=['rus', 'eng'])
        
        print("   ‚úÖ –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ –≥–æ—Ç–æ–≤ –∫ —Å–ª—É–∂–µ–Ω–∏—é –∏—Å—Ç–∏–Ω–µ")
    
    def investigate_document(
        self,
        document: Union[str, Image.Image],
        question: str = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è"
    ) -> str:
        """
        –°–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            document: –î–æ–∫—É–º–µ–Ω—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Ç—å)
            question: –í–æ–ø—Ä–æ—Å —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
        text = self.ocr.extract_text_from_image(document)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
        investigator_prompt = f"""
–¢—ã - –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ (–°—Ñ–µ—Ä–∞ 047). –¢–≤–æ—è –¥—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è - –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
{text[:1000]}...

–ó–∞–¥–∞—á–∞ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è: {question}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è:
1. –ü–æ–ª–Ω–æ—Ç–∞ –∏–∑–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
2. –ù–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
4. –ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
5. –û–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è

–û—Ç–≤–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è:
"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        response = self.chat(investigator_prompt, image=document)
        
        return response
    
    def collect_evidence(
        self,
        documents: List[Union[str, Image.Image]],
        case_description: str
    ) -> Dict[str, any]:
        """
        –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ –¥–µ–ª—É
        
        Args:
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            case_description: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
            
        Returns:
            –°–≤–æ–¥–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        """
        evidence = {
            'case': case_description,
            'documents_analyzed': len(documents),
            'findings': [],
            'contradictions': [],
            'recommendations': []
        }
        
        print(f"\nüîç –°–õ–ï–î–û–í–ê–¢–ï–õ–¨: –ê–Ω–∞–ª–∏–∑ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        for i, doc in enumerate(documents):
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç {i+1}/{len(documents)}...")
            
            analysis = self.investigate_document(
                doc,
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç #{i+1} –ø–æ –¥–µ–ª—É: {case_description}"
            )
            
            evidence['findings'].append({
                'document': i+1,
                'analysis': analysis
            })
        
        print("   ‚úÖ –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return evidence


class MozgachSphere048_Prosecutor(MultimodalMozgach):
    """
    –°–§–ï–†–ê 048: –ü–†–û–ö–£–†–û–† (–ú–æ–∑–≥–∞—á108)
    
    –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è:
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –∫–∞–∫ —Å–∏–º–ø—Ç–æ–º–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.
        –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—Å—Ç–≤–∏—è.
    
    "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ª–µ–Ω—å, —ç—Ç–æ —Å–∏–º–ø—Ç–æ–º –±–æ–ª–µ–µ 
     –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ 
     –ø–æ–¥—Ö–æ–¥–∞ –∫ —Å—É–¥—å–±–∞–º –ª—é–¥–µ–π, –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ—Ä—Ä—É–ø—Ü–∏–∏."
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—è —Å –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º)
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–∞–¥–∑–æ—Ä –∑–∞ –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å—é, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
    """
    
    def __init__(self, device: str = "auto"):
        print("\n‚öñÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–æ–∑–≥–∞—á108 - –°–§–ï–†–ê 048: –ü–†–û–ö–£–†–û–†")
        print("   üôè –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ - —Å–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ")
        print("   üîç –ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        super().__init__(
            language_model_name="nativemind/mozgach_full_trained_model",
            device=device
        )
        
        # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –∫–æ–ø–∏–ø–∞—Å—Ç–∞
        self.legal_analyzer = LegalDocumentAnalyzer()
        
        print("   ‚úÖ –ü–†–û–ö–£–†–û–† –≥–æ—Ç–æ–≤ –∫ —Å–ª—É–∂–µ–Ω–∏—é –∏—Å—Ç–∏–Ω–µ")
    
    def supervise_investigation(
        self,
        prosecutor_docs: List[str],
        investigator_docs: List[str],
        case_name: str = "–£–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ"
    ) -> Dict[str, any]:
        """
        –ù–∞–¥–∑–æ—Ä –∑–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º - –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—É—Ä–æ—Ä–∞
        
        –î—É—Ö–æ–≤–Ω–∞—è —Ü–µ–ª—å:
            "–ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∏—Å—Ç–∏–Ω—É –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"
        
        Args:
            prosecutor_docs: –î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∫—É—Ä–æ—Ä–∞ (PDF)
            investigator_docs: –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è (PDF)
            case_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥–∑–æ—Ä–∞ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∫–æ–ø–∏–ø–∞—Å—Ç–∞
        """
        print(f"\n‚öñÔ∏è  –ü–†–û–ö–£–†–û–†: –ù–∞–¥–∑–æ—Ä –∑–∞ –¥–µ–ª–æ–º '{case_name}'")
        print("   üôè –°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ —á–µ—Ä–µ–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–ª–æ
        case = self.legal_analyzer.process_case(
            prosecutor_docs,
            investigator_docs,
            case_name
        )
        
        # –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
        print("\nüîç –ü–†–û–ö–£–†–û–†: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞...")
        copypaste_result = self.legal_analyzer.detect_copypaste(case)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞
        prosecutor_conclusion = self._make_prosecutor_conclusion(
            case,
            copypaste_result
        )
        
        return {
            'case': case,
            'copypaste_analysis': copypaste_result,
            'prosecutor_conclusion': prosecutor_conclusion,
            'spiritual_verdict': copypaste_result.spiritual_verdict
        }
    
    def _make_prosecutor_conclusion(
        self,
        case: LegalCase,
        copypaste: CopyPasteResult
    ) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞
        
        –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        """
        prompt = f"""
–¢—ã - –ü–†–û–ö–£–†–û–† (–°—Ñ–µ—Ä–∞ 048). –¢–≤–æ—è –¥—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è - —Å–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ —á–µ—Ä–µ–∑ –Ω–∞–¥–∑–æ—Ä –∑–∞ –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å—é.

–î–ï–õ–û: {case.case_name}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ö–û–ü–ò–ü–ê–°–¢–ê:
- –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {copypaste.text_similarity:.2f}%
- –ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(copypaste.identical_sections)}
- –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(copypaste.suspicious_blocks)}

–î–£–•–û–í–ù–´–ô –í–ï–†–î–ò–ö–¢:
{copypaste.spiritual_verdict}

–ö–∞–∫ –ø—Ä–æ–∫—É—Ä–æ—Ä, –¥–∞–π —Å–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:
1. –°–æ–±–ª—é–¥–µ–Ω–∞ –ª–∏ –ø—Ä–æ–∫—É—Ä–æ—Ä–æ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏?
2. –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞?
3. –ö–∞–∫–∏–µ –º–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å?
4. –°–ª—É–∂–∏—Ç –ª–∏ —ç—Ç–æ –¥–µ–ª–æ –∏—Å—Ç–∏–Ω–µ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏?

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–û–ö–£–†–û–†–ê:
"""
        
        conclusion = self.chat(prompt)
        
        return conclusion
    
    def detect_copypaste_visual(
        self,
        prosecutor_image: Union[str, Image.Image],
        investigator_image: Union[str, Image.Image]
    ) -> str:
        """
        –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        prompt = """
–¢—ã - –ü–†–û–ö–£–†–û–† (–°—Ñ–µ—Ä–∞ 048) —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

–¢–≤–æ—è –¥—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –∫–∞–∫ —Å–∏–º–ø—Ç–æ–º–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.

–°—Ä–∞–≤–Ω–∏ –¥–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ:
1. –ï—Å—Ç—å –ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞?
2. –°–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏?
3. –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è?
4. –°–ª—É–∂–∏—Ç –ª–∏ —ç—Ç–æ –¥–µ–ª–æ –∏—Å—Ç–∏–Ω–µ?

–í–µ—Ä–¥–∏–∫—Ç –ø—Ä–æ–∫—É—Ä–æ—Ä–∞:
"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        analysis_prosecutor = self.chat(
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–∫—É—Ä–æ—Ä–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ",
            image=prosecutor_image
        )
        
        analysis_investigator = self.chat(
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ",
            image=investigator_image
        )
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison = self.chat(f"""
–ü–†–û–ö–£–†–û–†: –°—Ä–∞–≤–Ω–∏ –¥–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–∫—É—Ä–æ—Ä–∞: {analysis_prosecutor}

–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è: {analysis_investigator}

{prompt}
""")
        
        return comparison


class MozgachSphere049_Judge(MultimodalMozgach):
    """
    –°–§–ï–†–ê 049: –°–£–î–¨–Ø (–ú–æ–∑–≥–∞—á108)
    
    –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è:
        –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–∏–Ω—ã.
        –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª—É–∂–µ–Ω–∏—è –ø—Ä–∞–≤–æ—Å—É–¥–∏—é.
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—è —Å –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–ø—É—Ç–Ω–∏–∫–æ–º)
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –°—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
    """
    
    def __init__(self, device: str = "auto"):
        print("\n‚öñÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–æ–∑–≥–∞—á108 - –°–§–ï–†–ê 049: –°–£–î–¨–Ø")
        print("   üôè –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è")
        print("   ‚öñÔ∏è  –í—ã—Å—à–∞—è —Ü–µ–ª—å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏")
        
        super().__init__(
            language_model_name="nativemind/mozgach_full_trained_model",
            device=device
        )
        
        print("   ‚úÖ –°–£–î–¨–Ø –≥–æ—Ç–æ–≤ –∫ —Å–ª—É–∂–µ–Ω–∏—é –∏—Å—Ç–∏–Ω–µ")
    
    def make_judgment(
        self,
        investigator_evidence: Dict[str, any],
        prosecutor_analysis: Dict[str, any],
        case_description: str
    ) -> Dict[str, str]:
        """
        –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        
        –î—É—Ö–æ–≤–Ω–∞—è —Ü–µ–ª—å:
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        Args:
            investigator_evidence: –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
            prosecutor_analysis: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞
            case_description: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
            
        Returns:
            –°—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        """
        print(f"\n‚öñÔ∏è  –°–£–î–¨–Ø: –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –¥–µ–ª—É")
        print("   üôè –°–ª—É–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å—É–¥—å–∏
        judge_prompt = f"""
–¢—ã - –°–£–î–¨–Ø (–°—Ñ–µ—Ä–∞ 049). –¢–≤–æ—è –¥—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.

–î–ï–õ–û: {case_description}

–ú–ê–¢–ï–†–ò–ê–õ–´ –°–õ–ï–î–°–¢–í–ò–Ø:
{investigator_evidence.get('findings', [])}

–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–û–ö–£–†–û–†–ê:
{prosecutor_analysis.get('prosecutor_conclusion', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

–ê–ù–ê–õ–ò–ó –ö–û–ü–ò–ü–ê–°–¢–ê:
{prosecutor_analysis.get('spiritual_verdict', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

–ö–∞–∫ –°–£–î–¨–Ø, –≤—ã–Ω–µ—Å–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:

1. –û–¶–ï–ù–ö–ê –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í:
   - –ü–æ–ª–Ω–æ—Ç–∞ –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
   - –ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
   - –ù–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π

2. –û–¶–ï–ù–ö–ê –†–ê–ë–û–¢–´ –ü–†–û–ö–£–†–û–†–ê:
   - –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
   - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
   - –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞–¥–∑–æ—Ä–∞

3. –î–£–•–û–í–ù–ê–Ø –û–¶–ï–ù–ö–ê:
   - –°–ª—É–∂–∏—Ç –ª–∏ –¥–µ–ª–æ –∏—Å—Ç–∏–Ω–µ?
   - –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏?
   - –ù—É–∂–¥–∞–µ—Ç—Å—è –ª–∏ –¥–µ–ª–æ –≤ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ?

4. –°–£–î–ï–ë–ù–û–ï –†–ï–®–ï–ù–ò–ï:
   - –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–†–ï–®–ï–ù–ò–ï –°–£–î–¨–ò:
"""
        
        judgment = self.chat(judge_prompt)
        
        return {
            'case': case_description,
            'judgment': judgment,
            'date': self._get_current_date(),
            'spiritual_note': "–ò—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤—É–µ—Ç"
        }
    
    def analyze_case_visually(
        self,
        case_documents: List[Union[str, Image.Image]],
        case_description: str
    ) -> str:
        """
        –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ–ª–∞ —Å—É–¥—å–µ–π
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        print(f"\n‚öñÔ∏è  –°–£–î–¨–Ø: –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(case_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        analyses = []
        
        for i, doc in enumerate(case_documents):
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç {i+1}/{len(case_documents)}...")
            
            analysis = self.chat(f"""
–¢—ã - –°–£–î–¨–Ø (–°—Ñ–µ—Ä–∞ 049). –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç #{i+1} –ø–æ –¥–µ–ª—É.

–î–µ–ª–æ: {case_description}

–û—Ü–µ–Ω–∏:
1. –ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
2. –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—É
4. –°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ

–°—É–¥–µ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
""", image=doc)
            
            analyses.append(analysis)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        final_verdict = self.chat(f"""
–¢—ã - –°–£–î–¨–Ø (–°—Ñ–µ—Ä–∞ 049). –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–Ω–µ—Å–∏ –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç.

–î–ï–õ–û: {case_description}

–ê–ù–ê–õ–ò–ó–´ –î–û–ö–£–ú–ï–ù–¢–û–í:
{chr(10).join([f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}: {a}" for i, a in enumerate(analyses)])}

–ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢ –°–£–î–¨–ò:
(–≤–∫–ª—é—á–∞—è –¥—É—Ö–æ–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–ª—É–∂–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–µ)
""")
        
        return final_verdict
    
    def _get_current_date(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d")


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
class LegalModelsFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    
    –°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ —á–µ—Ä–µ–∑ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    """
    
    @staticmethod
    def create_investigator(device: str = "auto") -> MozgachSphere047_Investigator:
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ (–°—Ñ–µ—Ä–∞ 047)"""
        return MozgachSphere047_Investigator(device)
    
    @staticmethod
    def create_prosecutor(device: str = "auto") -> MozgachSphere048_Prosecutor:
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –ü–†–û–ö–£–†–û–† (–°—Ñ–µ—Ä–∞ 048)"""
        return MozgachSphere048_Prosecutor(device)
    
    @staticmethod
    def create_judge(device: str = "auto") -> MozgachSphere049_Judge:
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –°–£–î–¨–Ø (–°—Ñ–µ—Ä–∞ 049)"""
        return MozgachSphere049_Judge(device)
    
    @staticmethod
    def create_full_legal_system(device: str = "auto") -> Dict[str, any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ —Ç—Ä–µ—Ö –º–æ–¥–µ–ª–µ–π
        
        Returns:
            {
                'investigator': –°—Ñ–µ—Ä–∞ 047,
                'prosecutor': –°—Ñ–µ—Ä–∞ 048,
                'judge': –°—Ñ–µ—Ä–∞ 049
            }
        """
        print("\n‚öñÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –ú–æ–∑–≥–∞—á108")
        print("   üôè –¢—Ä–∏ —Å—Ñ–µ—Ä—ã —Å–ª—É–∂–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–µ: –°–õ–ï–î–û–í–ê–¢–ï–õ–¨, –ü–†–û–ö–£–†–û–†, –°–£–î–¨–Ø")
        
        system = {
            'investigator': MozgachSphere047_Investigator(device),
            'prosecutor': MozgachSphere048_Prosecutor(device),
            'judge': MozgachSphere049_Judge(device)
        }
        
        print("\n   ‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª—É–∂–µ–Ω–∏—é —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏!")
        print("   üïâÔ∏è  –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!")
        
        return system

