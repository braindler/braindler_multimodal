#!/usr/bin/env python3
"""
–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ HuggingFace

–ó–∞–≥—Ä—É–∂–∞–µ—Ç –°—Ñ–µ—Ä—ã 047, 048, 049 –¥–ª—è Braindler –∏ Mozgach –Ω–∞ HuggingFace Hub

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
import sys
from huggingface_hub import HfApi, create_repo, upload_folder

def publish_to_huggingface(
    model_dir,
    repo_name,
    organization="nativemind",
    private=False,
    commit_message="Upload legal sphere model"
):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ HuggingFace
    
    Args:
        model_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—å—é
        repo_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "braindler-sphere-047")
        organization: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è HuggingFace (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: nativemind)
        private: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        commit_message: –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    """
    
    print("="*80)
    print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ HuggingFace")
    print("="*80)
    print()
    print(f"üìÅ –ú–æ–¥–µ–ª—å: {model_dir}")
    print(f"üè∑Ô∏è  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {organization}/{repo_name}")
    print(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {private}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(model_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_dir}")
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    print("üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HuggingFace API...")
    try:
        api = HfApi()
        whoami = api.whoami()
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {whoami['name']}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        print("   üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: huggingface-cli login")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    repo_id = f"{organization}/{repo_name}"
    print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_id}")
    
    try:
        create_repo(
            repo_id=repo_id,
            private=private,
            exist_ok=True,
            repo_type="model"
        )
        print(f"   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    
    try:
        api.upload_folder(
            folder_path=model_dir,
            repo_id=repo_id,
            repo_type="model",
            commit_message=commit_message
        )
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    url = f"https://huggingface.co/{repo_id}"
    print(f"\n{'='*80}")
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    print(f"{'='*80}")
    print(f"\nüîó URL: {url}")
    print(f"üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"""
from transformers import AutoModelForCausalLM, AutoTokenizer
from peft import PeftModel

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
base_model = AutoModelForCausalLM.from_pretrained("base_model_name")

# –ó–∞–≥—Ä—É–∑–∏—Ç—å LoRA –∞–¥–∞–ø—Ç–µ—Ä—ã
model = PeftModel.from_pretrained(base_model, "{repo_id}")
tokenizer = AutoTokenizer.from_pretrained("{repo_id}")
""")
    
    return True


def publish_all_spheres(
    base_dir="../models",
    organization="nativemind",
    private=False
):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä (047, 048, 049) –¥–ª—è Braindler –∏ Mozgach
    """
    
    print("="*80)
    print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Ñ–µ—Ä")
    print("="*80)
    print()
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    models = []
    
    # Braindler
    for sphere in ["047", "048", "049"]:
        model_dir = os.path.join(base_dir, f"sphere_{sphere}_braindler_final_model")
        if os.path.exists(model_dir):
            models.append({
                "dir": model_dir,
                "repo": f"braindler-multimodal-sphere-{sphere}",
                "sphere": sphere,
                "model_name": "Braindler"
            })
    
    # Mozgach
    for sphere in ["047", "048", "049"]:
        model_dir = os.path.join(base_dir, f"sphere_{sphere}_mozgach_full_trained_model")
        if os.path.exists(model_dir):
            models.append({
                "dir": model_dir,
                "repo": f"mozgach108-multimodal-sphere-{sphere}",
                "sphere": sphere,
                "model_name": "Mozgach108"
            })
    
    if not models:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–Ω—Ç—é–Ω–∏–Ω–≥:")
        print("   python finetune_sphere.py --sphere 047 --base-model ...")
        return
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(models)}")
    for m in models:
        print(f"   - {m['model_name']} –°—Ñ–µ—Ä–∞ {m['sphere']}")
    print()
    
    # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    results = []
    for i, m in enumerate(models):
        print(f"\n[{i+1}/{len(models)}] –ü—É–±–ª–∏–∫–∞—Ü–∏—è {m['model_name']} –°—Ñ–µ—Ä–∞ {m['sphere']}")
        print("-"*80)
        
        success = publish_to_huggingface(
            model_dir=m['dir'],
            repo_name=m['repo'],
            organization=organization,
            private=private,
            commit_message=f"Upload {m['model_name']} Sphere {m['sphere']} - Legal multimodal model"
        )
        
        results.append({
            "model": f"{m['model_name']} {m['sphere']}",
            "success": success,
            "repo": f"{organization}/{m['repo']}"
        })
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*80}")
    print("üìä –ò—Ç–æ–≥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    print(f"{'='*80}")
    
    for r in results:
        status = "‚úÖ" if r['success'] else "‚ùå"
        print(f"{status} {r['model']}: {r['repo']}")
    
    success_count = sum(1 for r in results if r['success'])
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {success_count}/{len(results)}")
    
    if success_count == len(results):
        print("\nüéâ –í—Å–µ –º–æ–¥–µ–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")
        print("‚öñÔ∏è  –ò—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–∞! üïâÔ∏è  –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ HuggingFace"
    )
    parser.add_argument(
        "--model-dir",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—å—é (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏)"
    )
    parser.add_argument(
        "--repo-name",
        help="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ HuggingFace"
    )
    parser.add_argument(
        "--organization",
        default="nativemind",
        help="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è HuggingFace (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: nativemind)"
    )
    parser.add_argument(
        "--private",
        action="store_true",
        help="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    )
    parser.add_argument(
        "--all",
        action="store_true",
        help="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"
    )
    parser.add_argument(
        "--base-dir",
        default="../models",
        help="–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ../models)"
    )
    
    args = parser.parse_args()
    
    if args.all:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
        publish_all_spheres(
            base_dir=args.base_dir,
            organization=args.organization,
            private=args.private
        )
    elif args.model_dir and args.repo_name:
        # –ü—É–±–ª–∏–∫—É–µ–º –æ–¥–Ω—É –º–æ–¥–µ–ª—å
        publish_to_huggingface(
            model_dir=args.model_dir,
            repo_name=args.repo_name,
            organization=args.organization,
            private=args.private
        )
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --all, –ª–∏–±–æ --model-dir –∏ --repo-name")
        parser.print_help()

