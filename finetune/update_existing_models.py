#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π —Å—Ñ–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ HuggingFace

–û–±–Ω–æ–≤–ª—è–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
import sys
import subprocess
import time
from typing import Dict, List

def check_model_exists(model_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ HuggingFace"""
    try:
        result = subprocess.run(
            ["huggingface-cli", "repo", "info", model_name],
            capture_output=True,
            text=True,
            timeout=30
        )
        return result.returncode == 0
    except:
        return False

def update_model_on_huggingface(sphere: str, model_path: str, model_name: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ HuggingFace"""
    
    sphere_names = {
        "073": "DEVELOPER",
        "074": "CODE_REVIEWER", 
        "075": "ARCHITECT",
        "076": "DEVOPS",
        "077": "QA_TESTER",
        "078": "TECH_WRITER"
    }
    
    print(f"\n{'='*80}")
    print(f"üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–§–ï–†–´ {sphere}: {sphere_names[sphere]}")
    print(f"{'='*80}")
    print(f"üì¶ –ú–æ–¥–µ–ª—å: {model_name}")
    print(f"üìÅ –ü—É—Ç—å: {model_path}")
    
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {model_name}...")
        if not check_model_exists(model_name):
            print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {model_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print(f"\nüì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        clone_cmd = ["git", "clone", f"https://huggingface.co/{model_name}", f"temp_{sphere}"]
        result = subprocess.run(clone_cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result.stderr}")
            return False
        
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
        print(f"\nüìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏...")
        temp_dir = f"temp_{sphere}"
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ model_path –≤ temp_dir
        copy_cmd = ["cp", "-r", f"{model_path}/*", temp_dir]
        result = subprocess.run(copy_cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {result.stderr}")
            return False
        
        print("‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ README —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        readme_content = f"""# –°—Ñ–µ—Ä–∞ {sphere}: {sphere_names[sphere]}

## üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

–≠—Ç–∞ –º–æ–¥–µ–ª—å –±—ã–ª–∞ —É–ª—É—á—à–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ nativemind/mozgach_alpaca_gift.

### –£–ª—É—á—à–µ–Ω–∏—è:
- ‚úÖ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (200 –ø—Ä–∏–º–µ—Ä–æ–≤)
- ‚úÖ –†–æ–ª–µ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è (5 —ç–ø–æ—Ö, batch size 4)
- ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (4096 —Ç–æ–∫–µ–Ω–æ–≤)
- ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è LoRA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –û–∂–∏–¥–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: 8.0+/10

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
```python
from transformers import AutoTokenizer, AutoModelForCausalLM
from peft import PeftModel

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
base_model = AutoModelForCausalLM.from_pretrained("nativemind/shridhar_8k_multimodal")
tokenizer = AutoTokenizer.from_pretrained("nativemind/shridhar_8k_multimodal")

# –ó–∞–≥—Ä—É–∑–∫–∞ LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞
model = PeftModel.from_pretrained(base_model, "{model_name}")
```

### –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
{sphere_names[sphere]} - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

---
¬© 2025 NativeMind - NativeMindNONC License
"""
        
        with open(f"{temp_dir}/README.md", "w", encoding="utf-8") as f:
            f.write(readme_content)
        
        print("‚úÖ README –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ö–æ–º–º–∏—Ç –∏ –ø—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π
        print(f"\nüíæ –ö–æ–º–º–∏—Ç –∏ –ø—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        os.chdir(temp_dir)
        
        # Git add
        subprocess.run(["git", "add", "."], check=True)
        
        # Git commit
        commit_cmd = ["git", "commit", "-m", f"üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°—Ñ–µ—Ä—ã {sphere}: —É–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º"]
        result = subprocess.run(commit_cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ö†Ô∏è  –ö–æ–º–º–∏—Ç: {result.stderr}")
        
        # Git push
        push_cmd = ["git", "push"]
        result = subprocess.run(push_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ HuggingFace!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ push: {result.stderr}")
            return False
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir("..")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        subprocess.run(["rm", "-rf", temp_dir], check=True)
        
        print(f"‚úÖ –°—Ñ–µ—Ä–∞ {sphere} ({sphere_names[sphere]}) –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ñ–µ—Ä—ã {sphere}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    print("==================================================================================")
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ú–û–î–ï–õ–ï–ô –ù–ê HUGGINGFACE")
    print("==================================================================================")
    print()
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ HuggingFace
    existing_models = {
        "073": "nativemind/sphere_073_developer",
        "074": "nativemind/sphere_074_developer", 
        "075": "nativemind/sphere_075_developer",
        "076": "nativemind/sphere_076_developer",
        "077": "nativemind/sphere_077_developer",
        "078": "nativemind/sphere_078_developer"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    models_dir = "../models_improved"
    available_models = []
    
    for sphere, model_name in existing_models.items():
        model_path = f"{models_dir}/sphere_{sphere}_improved"
        if os.path.exists(model_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
            model_files = [f for f in os.listdir(model_path) 
                          if f.endswith(('.bin', '.safetensors', '.json'))]
            if model_files:
                available_models.append((sphere, model_path, model_name))
                print(f"‚úÖ –°—Ñ–µ—Ä–∞ {sphere}: {model_name} - –≥–æ—Ç–æ–≤–∞ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é")
            else:
                print(f"‚è≥ –°—Ñ–µ—Ä–∞ {sphere}: {model_name} - –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è")
        else:
            print(f"‚ùå –°—Ñ–µ—Ä–∞ {sphere}: {model_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if not available_models:
        print("\n‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        return
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(available_models)} –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    results = {}
    
    for sphere, model_path, model_name in available_models:
        print(f"\nüöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ñ–µ—Ä—ã {sphere}...")
        
        success = update_model_on_huggingface(sphere, model_path, model_name)
        results[sphere] = success
        
        if success:
            print(f"‚úÖ –°—Ñ–µ—Ä–∞ {sphere} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ñ–µ—Ä—ã {sphere}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        if sphere != available_models[-1][0]:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è
            print("\n‚è≥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
    print("="*80)
    
    successful = sum(1 for success in results.values() if success)
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {successful}/{total}")
    print()
    
    for sphere, success in results.items():
        model_name = existing_models[sphere]
        if success:
            status = "‚úÖ –£–°–ü–ï–®–ù–û"
            print(f"–°—Ñ–µ—Ä–∞ {sphere}: {status}")
            print(f"   üîó https://huggingface.co/{model_name}")
        else:
            status = "‚ùå –û–®–ò–ë–ö–ê"
            print(f"–°—Ñ–µ—Ä–∞ {sphere}: {status}")
        print()
    
    print("üôè –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
