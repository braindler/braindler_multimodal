#!/usr/bin/env python3
"""
–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (073-078) –Ω–∞ HuggingFace

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
import sys
import json
from huggingface_hub import HfApi, create_repo
from transformers import AutoTokenizer, AutoModelForCausalLM
from peft import PeftModel
import torch

def publish_sphere_model(sphere, model_path, repo_name, organization="nativemind"):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä—ã –Ω–∞ HuggingFace
    
    Args:
        sphere: –ù–æ–º–µ—Ä —Å—Ñ–µ—Ä—ã
        model_path: –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        repo_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        organization: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ HuggingFace
    """
    
    sphere_names = {
        "073": "DEVELOPER",
        "074": "CODE_REVIEWER", 
        "075": "ARCHITECT",
        "076": "DEVOPS",
        "077": "QA_TESTER",
        "078": "TECH_WRITER"
    }
    
    full_repo_name = f"{organization}/{repo_name}"
    
    print(f"\n{'='*80}")
    print(f"üì§ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–§–ï–†–´ {sphere}: {sphere_names[sphere]}")
    print(f"{'='*80}")
    print(f"üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {full_repo_name}")
    print(f"üìÅ –ú–æ–¥–µ–ª—å: {model_path}")
    
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return False
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        try:
            create_repo(
                repo_id=full_repo_name,
                private=False,
                exist_ok=True
            )
            print(f"   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: {full_repo_name}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
        api = HfApi()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
        print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        model_files = [
            "adapter_model.safetensors",
            "adapter_config.json",
            "tokenizer.json",
            "tokenizer_config.json",
            "special_tokens_map.json",
            "vocab.json"
        ]
        
        uploaded_files = []
        
        for file_name in model_files:
            file_path = os.path.join(model_path, file_name)
            if os.path.exists(file_path):
                print(f"   üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º {file_name}...")
                api.upload_file(
                    path_or_fileobj=file_path,
                    path_in_repo=file_name,
                    repo_id=full_repo_name,
                    commit_message=f"Upload {file_name} for sphere {sphere}"
                )
                uploaded_files.append(file_name)
                print(f"   ‚úÖ {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ README.md
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ README.md...")
        
        readme_content = f"""# –°—Ñ–µ—Ä–∞ {sphere}: {sphere_names[sphere]}

–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ñ–µ—Ä—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ {sphere} ({sphere_names[sphere]}), –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –±–∞–∑–µ [nativemind/shridhar_8k_multimodal](https://huggingface.co/nativemind/shridhar_8k_multimodal).

## üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ

**–°—Ñ–µ—Ä–∞ {sphere} ({sphere_names[sphere]})** - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.

## üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

```python
from transformers import AutoTokenizer, AutoModelForCausalLM
from peft import PeftModel

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
base_model = AutoModelForCausalLM.from_pretrained("nativemind/shridhar_8k_multimodal")
tokenizer = AutoTokenizer.from_pretrained("nativemind/shridhar_8k_multimodal")

# –ó–∞–≥—Ä—É–∑–∫–∞ LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞
model = PeftModel.from_pretrained(base_model, "{full_repo_name}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
prompt = "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞"
inputs = tokenizer(prompt, return_tensors="pt")
outputs = model.generate(**inputs, max_new_tokens=200, temperature=0.7)
response = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(response)
```

## üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

- **–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å**: nativemind/shridhar_8k_multimodal
- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: LoRA –∞–¥–∞–ø—Ç–∞—Ü–∏—è
- **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è**: {sphere_names[sphere]}
- **–Ø–∑—ã–∫–∏**: –†—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
- **–ö–æ–Ω—Ç–µ–∫—Å—Ç**: 8192 —Ç–æ–∫–µ–Ω–∞

## üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è:
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
- Code review –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- DevOps –∑–∞–¥–∞—á
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—å—Å—Ç–≤–∞

## üìö –û–±—É—á–µ–Ω–∏–µ

–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ developers_108_perfect.jsonl —Å 108 –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è —Å—Ñ–µ—Ä—ã {sphere}.

## üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License

---

**–ê–≤—Ç–æ—Ä**: NativeMind  
**–î–∞—Ç–∞**: 25 –æ–∫—Ç—è–±—Ä—è 2025  
**–í–µ—Ä—Å–∏—è**: 1.0
"""
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ README –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        readme_path = f"/tmp/readme_{sphere}.md"
        with open(readme_path, "w", encoding="utf-8") as f:
            f.write(readme_content)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ README
        api.upload_file(
            path_or_fileobj=readme_path,
            path_in_repo="README.md",
            repo_id=full_repo_name,
            commit_message=f"Add README for sphere {sphere}"
        )
        print("   ‚úÖ README.md –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(readme_path)
        
        print(f"\n‚úÖ –°—Ñ–µ—Ä–∞ {sphere} ({sphere_names[sphere]}) —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
        print(f"üîó –°—Å—ã–ª–∫–∞: https://huggingface.co/{full_repo_name}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ñ–µ—Ä—ã {sphere}: {e}")
        return False

def main():
    print("==================================================================================")
    print("üì§ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–§–ï–† –†–ê–ó–†–ê–ë–û–¢–ö–ò –ù–ê HUGGINGFACE")
    print("==================================================================================")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    models_dir = "../models"
    available_spheres = []
    
    for sphere in ["073", "074", "075", "076", "077", "078"]:
        model_path = f"{models_dir}/sphere_{sphere}_shridhar"
        if os.path.exists(model_path):
            available_spheres.append(sphere)
            print(f"‚úÖ –°—Ñ–µ—Ä–∞ {sphere}: {model_path}")
        else:
            print(f"‚ùå –°—Ñ–µ—Ä–∞ {sphere}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(available_spheres)} –æ–±—É—á–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä")
    
    if not available_spheres:
        print("\n‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
        return
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ñ–µ—Ä—ã
    results = {}
    
    for sphere in available_spheres:
        model_path = f"{models_dir}/sphere_{sphere}_shridhar"
        repo_name = f"sphere_{sphere}_developer"
        
        success = publish_sphere_model(
            sphere=sphere,
            model_path=model_path,
            repo_name=repo_name
        )
        results[sphere] = success
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò")
    print("="*80)
    
    successful = sum(1 for success in results.values() if success)
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {successful}/{total}")
    print()
    
    for sphere, success in results.items():
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        repo_link = f"https://huggingface.co/nativemind/sphere_{sphere}_developer"
        print(f"–°—Ñ–µ—Ä–∞ {sphere}: {status}")
        if success:
            print(f"   üîó {repo_link}")
    
    print(f"\nüôè –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
