#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–≤–Ω–æ 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Ollama

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ continue.ai

–î—É—Ö–æ–≤–Ω–æ–µ —á–∏—Å–ª–æ: 108 –ø—Ä–∏–º–µ—Ä–æ–≤ √ó 6 —Å—Ñ–µ—Ä + 1080 Alpaca = 1728 –ø—Ä–∏–º–µ—Ä–æ–≤

¬© 2025 NativeMind - NativeMindNONC License
"""

import json
import os
import subprocess
from pathlib import Path

def _ollama_bin():
    return os.environ.get("OLLAMA_BIN", "/opt/homebrew/bin/ollama")

def call_ollama(prompt, model="mozgach108:latest"):
    """–í—ã–∑—ã–≤–∞–µ—Ç Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        selected_model = os.environ.get("OLLAMA_MODEL", model)
        result = subprocess.run(
            [_ollama_bin(), "run", selected_model, prompt],
            capture_output=True,
            text=True,
            timeout=120
        )
        stdout = (result.stdout or "").strip()
        stderr = (result.stderr or "").strip()
        if result.returncode != 0:
            return f"–û—à–∏–±–∫–∞ ollama (code {result.returncode}): {stderr or stdout}"
        return stdout or stderr
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def generate_sphere_001_spiritual(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (–°—Ñ–µ—Ä–∞ 001)"""
    print("\nüïâÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 001: –î–£–•–û–í–ù–ê–Ø (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    spiritual_prompts = [
        "–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏",
        "–ö–∞–∫ —Å–ª—É–∂–∏—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–¥",
        "–í —á–µ–º –¥—É—Ö–æ–≤–Ω—ã–π —Å–º—ã—Å–ª —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞",
        "–û–±—ä—è—Å–Ω–∏ –∫–∞—Ä–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞",
        "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –∏—Å—Ç–∏–Ω–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏",
        "–ö–∞–∫ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π",
        "–û–±—ä—è—Å–Ω–∏ –î—Ö–∞—Ä–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –°–∞—Ç–≤–∞ –≤ —Å–ª—É–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "–ö–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º",
        "–û–±—ä—è—Å–Ω–∏ –ê—Ö–∏–º—Å—É –≤ code review"
    ]
    
    examples = []
    
    for i in range(target_count):
        prompt_template = spiritual_prompts[i % len(spiritual_prompts)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        response = call_ollama(f"{prompt_template}. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        
        examples.append({
            "instruction": prompt_template,
            "input": "",
            "output": response,
            "sphere": "001",
            "role": "spiritual",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 001: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_073_developer(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –ü–†–û–ì–†–ê–ú–ú–ò–°–¢–ê (–°—Ñ–µ—Ä–∞ 073)"""
    print("\nüíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 073: –ü–†–û–ì–†–ê–ú–ú–ò–°–¢ (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º",
        "–ò—Å–ø—Ä–∞–≤—å –±–∞–≥ –≤ –∫–æ–¥–µ",
        "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫",
        "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –∫–æ–¥",
        "–†–µ–∞–ª–∏–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–ù–∞–ø–∏—à–∏ unit-—Ç–µ—Å—Ç",
        "–£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "–î–æ–±–∞–≤—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    ]
    
    code_contexts = [
        "def process_data(data): return data",
        "for i in range(len(arr)): print(arr[i])",
        "if x == True: return y",
        "try: do_something() except: pass",
        "class MyClass: pass",
        "def calculate(a, b): return a + b",
        "result = [x for x in range(100)]",
        "while True: continue",
        "import *",
        "global variable = 10"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        context = code_contexts[i % len(code_contexts)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - –ü–†–û–ì–†–ê–ú–ú–ò–°–¢ (–°—Ñ–µ—Ä–∞ 073).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–¥–∞.

–ó–∞–¥–∞—á–∞: {template}

–ö–æ–¥: {context}

–î–∞–π —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - –ü–†–û–ì–†–ê–ú–ú–ò–°–¢. {template}",
            "input": context,
            "output": response,
            "sphere": "073",
            "role": "sphere_073_developer",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 073: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_074_code_reviewer(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ CODE REVIEWER (–°—Ñ–µ—Ä–∞ 074)"""
    print("\nüîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 074: CODE REVIEWER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞",
        "–ù–∞–π–¥–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–≥–∏",
        "–û—Ü–µ–Ω–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞",
        "–ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
        "–ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "–û—Ü–µ–Ω–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
        "–ü—Ä–æ–≤–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫",
        "–ù–∞–π–¥–∏ code smells",
        "–û—Ü–µ–Ω–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        "–ü—Ä–æ–≤–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    ]
    
    code_samples = [
        "def login(user, pwd): return user == 'admin' and pwd == '123'",
        "data = json.loads(request.body); db.execute(f'SELECT * FROM users WHERE id={data['id']}')",
        "def process(): global result; result = complicated_calculation()",
        "try: file = open('data.txt'); data = file.read() except: pass",
        "class UserManager: def __init__(self): self.users = []; self.admins = []; self.guests = []",
        "def calculate(x, y, z, a, b, c, d, e, f): return x+y+z+a+b+c+d+e+f",
        "password = request.GET['password']; user.password = password",
        "while True: try: process(); break; except: continue",
        "def func(x): return func(x-1) if x > 0 else 0",
        "data = None; if data: print(data.value)"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        code = code_samples[i % len(code_samples)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - CODE REVIEWER (–°—Ñ–µ—Ä–∞ 074).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞.

–ó–∞–¥–∞—á–∞: {template}

–ö–æ–¥ –Ω–∞ —Ä–µ–≤—å—é:
```
{code}
```

–î–∞–π code review (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - CODE REVIEWER. {template}",
            "input": code,
            "output": response,
            "sphere": "074",
            "role": "sphere_074_code_reviewer",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 074: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_075_architect(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –ê–†–•–ò–¢–ï–ö–¢–û–†–ê (–°—Ñ–µ—Ä–∞ 075)"""
    print("\nüèóÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 075: –ê–†–•–ò–¢–ï–ö–¢–û–† (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        "–û—Ü–µ–Ω–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è",
        "–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π API",
        "–û—Ü–µ–Ω–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥ –∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π message queue –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
    ]
    
    requirements = [
        "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 10000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
        "–ù—É–∂–Ω–∞ –≤—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 99.99%",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ç–∞–±–∞–π—Ç—ã –¥–∞–Ω–Ω—ã—Ö",
        "–ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–æ–≤",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–π",
        "–ù—É–∂–Ω–∞ –∏–∑–æ–ª—è—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å fault-tolerant"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        requirement = requirements[i % len(requirements)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - –ê–†–•–ò–¢–ï–ö–¢–û–† –ü–û (–°—Ñ–µ—Ä–∞ 075).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º.

–ó–∞–¥–∞—á–∞: {template}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirement}

–î–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - –ê–†–•–ò–¢–ï–ö–¢–û–†. {template}",
            "input": requirement,
            "output": response,
            "sphere": "075",
            "role": "sphere_075_architect",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 075: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_076_devops(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ DEVOPS (–°—Ñ–µ—Ä–∞ 076)"""
    print("\n‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 076: DEVOPS ENGINEER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ù–∞—Å—Ç—Ä–æ–π CI/CD pipeline",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π Docker –æ–±—Ä–∞–∑",
        "–ù–∞—Å—Ç—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π –¥–µ–ø–ª–æ–π",
        "–ù–∞—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
        "–ù–∞—Å—Ç—Ä–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–†–µ–∞–ª–∏–∑—É–π blue-green deployment",
        "–ù–∞—Å—Ç—Ä–æ–π backup —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    ]
    
    infrastructure = [
        "Kubernetes –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞ 50 –Ω–æ–¥–∞—Ö",
        "AWS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å Lambda –∏ ECS",
        "Docker Compose —Å 10 —Å–µ—Ä–≤–∏—Å–∞–º–∏",
        "GitLab CI —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç–µ–π–¥–∂–∞–º–∏",
        "Terraform –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–±–ª–∞–∫–∞",
        "Ansible playbooks –¥–ª—è –¥–µ–ø–ª–æ—è",
        "Jenkins pipeline —Å —Ç–µ—Å—Ç–∞–º–∏",
        "Prometheus + Grafana —Å—Ç–µ–∫",
        "ELK stack –¥–ª—è –ª–æ–≥–æ–≤",
        "Redis –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        infra = infrastructure[i % len(infrastructure)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - DEVOPS ENGINEER (–°—Ñ–µ—Ä–∞ 076).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–ó–∞–¥–∞—á–∞: {template}

–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {infra}

–î–∞–π DevOps —Ä–µ—à–µ–Ω–∏–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - DEVOPS. {template}",
            "input": infra,
            "output": response,
            "sphere": "076",
            "role": "sphere_076_devops",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 076: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_077_qa_tester(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ QA TESTER (–°—Ñ–µ—Ä–∞ 077)"""
    print("\nüß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 077: QA TESTER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–°–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç-–ø–ª–∞–Ω",
        "–ù–∞–π–¥–∏ edge cases",
        "–ù–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã",
        "–ü—Ä–æ–≤–µ—Ä—å –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
        "–°–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç-–∫–µ–π—Å—ã",
        "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "–ù–∞–π–¥–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏",
        "–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "–°–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç-–¥–∞–Ω–Ω—ã–µ",
        "–ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    ]
    
    features = [
        "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤",
        "–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
        "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏",
        "–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏",
        "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤",
        "Real-time —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV/PDF",
        "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        feature = features[i % len(features)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - QA TESTER (–°—Ñ–µ—Ä–∞ 077).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

–ó–∞–¥–∞—á–∞: {template}

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {feature}

–î–∞–π —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - QA TESTER. {template}",
            "input": feature,
            "output": response,
            "sphere": "077",
            "role": "sphere_077_qa_tester",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 077: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_078_tech_writer(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ TECHNICAL WRITER (–°—Ñ–µ—Ä–∞ 078)"""
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 078: TECHNICAL WRITER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ù–∞–ø–∏—à–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
        "–°–æ–∑–¥–∞–π README –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
        "–ù–∞–ø–∏—à–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
        "–ù–∞–ø–∏—à–∏ changelog",
        "–°–æ–∑–¥–∞–π getting started guide",
        "–ù–∞–ø–∏—à–∏ troubleshooting —Å–µ–∫—Ü–∏—é",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π deployment –ø—Ä–æ—Ü–µ—Å—Å",
        "–ù–∞–ø–∏—à–∏ contributing guidelines",
        "–°–æ–∑–¥–∞–π FAQ —Å–µ–∫—Ü–∏—é"
    ]
    
    projects = [
        "REST API –¥–ª—è e-commerce –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        "Open-source –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π",
        "CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
        "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
        "Python SDK –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
        "GraphQL API —Å–µ—Ä–≤–µ—Ä",
        "Docker –æ–±—Ä–∞–∑ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
        "CI/CD pipeline –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "Kubernetes –æ–ø–µ—Ä–∞—Ç–æ—Ä"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        project = projects[i % len(projects)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - TECHNICAL WRITER (–°—Ñ–µ—Ä–∞ 078).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ —è—Å–Ω–æ–π, –ø–æ–Ω—è—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.

–ó–∞–¥–∞—á–∞: {template}

–ü—Ä–æ–µ–∫—Ç: {project}

–î–∞–π –ø—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - TECHNICAL WRITER. {template}",
            "input": project,
            "output": response,
            "sphere": "078",
            "role": "sphere_078_tech_writer",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 078: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("="*80)
    print("üåü –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (continue.ai –Ω–∞–±–æ—Ä)")
    print("="*80)
    print()
    print("üôè –°–≤—è—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ 108 –≤ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    try:
        result = subprocess.run([_ollama_bin(), "--version"], capture_output=True, text=True)
        ver = (result.stdout or result.stderr or "").strip()
        print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω: {ver}")
        print(f"üß† –ú–æ–¥–µ–ª—å: {os.environ.get('OLLAMA_MODEL', 'mozgach108:latest')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {e}")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    all_examples = []
    
    # –°—Ñ–µ—Ä–∞ 001: –î—É—Ö–æ–≤–Ω–∞—è (108)
    all_examples.extend(generate_sphere_001_spiritual(108))
    
    # –°—Ñ–µ—Ä–∞ 073: –ü–†–û–ì–†–ê–ú–ú–ò–°–¢ (108)
    all_examples.extend(generate_sphere_073_developer(108))
    
    # –°—Ñ–µ—Ä–∞ 074: CODE REVIEWER (108)
    all_examples.extend(generate_sphere_074_code_reviewer(108))
    
    # –°—Ñ–µ—Ä–∞ 075: –ê–†–•–ò–¢–ï–ö–¢–û–† (108)
    all_examples.extend(generate_sphere_075_architect(108))
    
    # –°—Ñ–µ—Ä–∞ 076: DEVOPS (108)
    all_examples.extend(generate_sphere_076_devops(108))
    
    # –°—Ñ–µ—Ä–∞ 077: QA TESTER (108)
    all_examples.extend(generate_sphere_077_qa_tester(108))
    
    # –°—Ñ–µ—Ä–∞ 078: TECHNICAL WRITER (108)
    all_examples.extend(generate_sphere_078_tech_writer(108))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Alpaca (1080 –ø—Ä–∏–º–µ—Ä–æ–≤)
    print("\nü¶ô –ó–∞–≥—Ä—É–∑–∫–∞ Alpaca (1080 –ø—Ä–∏–º–µ—Ä–æ–≤)...")
    alpaca_path = "/Volumes/MULTIMODAL/proj.datasets/alpaca_dataset/alpaca_data.json"
    
    if os.path.exists(alpaca_path):
        with open(alpaca_path, 'r', encoding='utf-8') as f:
            alpaca_data = json.load(f)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        keywords = ['code', 'program', 'function', 'algorithm', 'debug', 'optimize', 
                   'design', 'implement', 'develop', 'software', 'api', 'test']
        alpaca_filtered = [ex for ex in alpaca_data 
                          if any(kw in ex['instruction'].lower() for kw in keywords)][:1080]
        
        for ex in alpaca_filtered:
            all_examples.append({
                "instruction": ex['instruction'],
                "input": ex.get('input', ''),
                "output": ex['output'],
                "sphere": "general",
                "role": "general",
                "source": "alpaca"
            })
        
        print(f"   ‚úÖ Alpaca: {len(alpaca_filtered)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    else:
        print(f"   ‚ö†Ô∏è  Alpaca –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {alpaca_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_path = "../datasets/developers_108_perfect.jsonl"
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    with open(output_path, 'w', encoding='utf-8') as f:
        for ex in all_examples:
            f.write(json.dumps(ex, ensure_ascii=False) + '\n')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "total": len(all_examples),
        "distribution": {
            "001_spiritual": len([e for e in all_examples if e['sphere'] == '001']),
            "073_developer": len([e for e in all_examples if e['sphere'] == '073']),
            "074_code_reviewer": len([e for e in all_examples if e['sphere'] == '074']),
            "075_architect": len([e for e in all_examples if e['sphere'] == '075']),
            "076_devops": len([e for e in all_examples if e['sphere'] == '076']),
            "077_qa_tester": len([e for e in all_examples if e['sphere'] == '077']),
            "078_tech_writer": len([e for e in all_examples if e['sphere'] == '078']),
            "general_alpaca": len([e for e in all_examples if e['sphere'] == 'general'])
        }
    }
    
    stats_path = output_path.replace('.jsonl', '_stats.json')
    with open(stats_path, 'w', encoding='utf-8') as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    print()
    print("="*80)
    print("‚úÖ –î–ê–¢–ê–°–ï–¢ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í –ì–û–¢–û–í!")
    print("="*80)
    print()
    print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (—Å–≤—è—â–µ–Ω–Ω–æ–µ 108):")
    for sphere, count in stats['distribution'].items():
        print(f"   {sphere}: {count}")
    print()
    print(f"üì¶ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats['total']}")
    print()
    print("üôè 108 - —Å–≤—è—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    print("üíª –ì–æ—Ç–æ–≤–æ –¥–ª—è continue.ai!")

if __name__ == "__main__":
    main()



