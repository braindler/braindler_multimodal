#!/usr/bin/env python3
"""
–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ Ollama

–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –°—Ñ–µ—Ä—ã 047, 048, 049 –≤ Ollama Registry

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
import sys
import subprocess
import json

def create_modelfile(sphere, base_model, description):
    """
    –°–æ–∑–¥–∞–µ—Ç Modelfile –¥–ª—è Ollama
    
    Args:
        sphere: –ù–æ–º–µ—Ä —Å—Ñ–µ—Ä—ã ("047", "048", "049")
        base_model: –ò–º—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ Ollama
        description: –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        
    Returns:
        –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Modelfile
    """
    
    sphere_names = {
        "047": "–°–õ–ï–î–û–í–ê–¢–ï–õ–¨",
        "048": "–ü–†–û–ö–£–†–û–†", 
        "049": "–°–£–î–¨–Ø"
    }
    
    sphere_missions = {
        "047": "–ë–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–∏–Ω—ã",
        "048": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –∫–∞–∫ —Å–∏–º–ø—Ç–æ–º–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏. –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—Å—Ç–≤–∏—è.",
        "049": "–í—ã–Ω–µ—Å–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–∏–Ω—ã –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏"
    }
    
    modelfile = f"""# {sphere_names[sphere]} - –°—Ñ–µ—Ä–∞ {sphere}

FROM {base_model}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
PARAMETER temperature 0.7
PARAMETER top_p 0.9
PARAMETER top_k 40
PARAMETER num_ctx 4096

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM \"\"\"
–¢—ã - {sphere_names[sphere]} (–°—Ñ–µ—Ä–∞ {sphere}) –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ú–æ–∑–≥–∞—á108.

–î–£–•–û–í–ù–ê–Ø –ú–ò–°–°–ò–Ø: {sphere_missions[sphere]}

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
1. –ò—Å—Ç–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
2. –ë–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
3. –°–ª—É–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
4. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö

–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è {sphere_names[sphere].lower()}.
–ü–æ–º–æ–≥–∞–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–∏–Ω—É –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤ –¥–µ–ª–∞—Ö.

–ü–æ–º–Ω–∏: "–ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∏—Å—Ç–∏–Ω—É –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —Ç–æ –µ—Å—Ç—å —Å –¥—É—Ö–æ–≤–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è."
\"\"\"

# –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞
TEMPLATE \"\"\"{{{{ .System }}}}

USER: {{{{ .Prompt }}}}

ASSISTANT:
\"\"\"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL maintainer="NativeMind"
LABEL license="NativeMindNONC"
LABEL sphere="{sphere}"
LABEL role="{sphere_names[sphere]}"
LABEL description="{description}"
"""
    
    return modelfile


def publish_to_ollama(
    model_dir,
    model_name,
    sphere,
    base_ollama_model="llama2:7b"
):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ Ollama
    
    Args:
        model_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é (LoRA)
        model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è Ollama
        sphere: –ù–æ–º–µ—Ä —Å—Ñ–µ—Ä—ã ("047", "048", "049")
        base_ollama_model: –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤ Ollama
    """
    
    sphere_names = {
        "047": "–°–õ–ï–î–û–í–ê–¢–ï–õ–¨",
        "048": "–ü–†–û–ö–£–†–û–†",
        "049": "–°–£–î–¨–Ø"
    }
    
    print("="*80)
    print(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Ollama: {sphere_names[sphere]} (–°—Ñ–µ—Ä–∞ {sphere})")
    print("="*80)
    print()
    print(f"üìÅ –ú–æ–¥–µ–ª—å: {model_dir}")
    print(f"üè∑Ô∏è  –ò–º—è –≤ Ollama: {model_name}")
    print(f"üîß –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {base_ollama_model}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        result = subprocess.run(
            ["ollama", "version"],
            capture_output=True,
            text=True
        )
        print(f"   ‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
    except FileNotFoundError:
        print("   ‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: https://ollama.ai/download")
        return False
    
    # –°–æ–∑–¥–∞–µ–º Modelfile
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ Modelfile...")
    description = f"–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å - {sphere_names[sphere]} (–°—Ñ–µ—Ä–∞ {sphere})"
    modelfile_content = create_modelfile(sphere, base_ollama_model, description)
    
    modelfile_path = os.path.join(model_dir, "Modelfile")
    with open(modelfile_path, 'w', encoding='utf-8') as f:
        f.write(modelfile_content)
    
    print(f"   ‚úÖ Modelfile —Å–æ–∑–¥–∞–Ω: {modelfile_path}")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –≤ Ollama
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ Ollama...")
    try:
        result = subprocess.run(
            ["ollama", "create", model_name, "-f", modelfile_path],
            capture_output=True,
            text=True,
            cwd=model_dir
        )
        
        if result.returncode == 0:
            print(f"   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {model_name}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    test_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç"
    
    try:
        result = subprocess.run(
            ["ollama", "run", model_name, test_prompt],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            print(f"   ‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"\n   üìù –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:")
            print(f"   {result.stdout[:200]}...")
        else:
            print(f"   ‚ö†Ô∏è  –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {result.stderr}")
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*80}")
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Ollama!")
    print(f"{'='*80}")
    print(f"\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"""
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å
ollama run {model_name}

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–¥–µ
import ollama

response = ollama.chat(model='{model_name}', messages=[
    {{'role': 'user', 'content': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç...'}}
])
print(response['message']['content'])
""")
    
    return True


def publish_all_spheres_ollama(
    base_dir="../models",
    base_ollama_model="llama2:7b"
):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä –≤ Ollama
    """
    
    print("="*80)
    print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä –≤ Ollama")
    print("="*80)
    print()
    
    models = []
    
    # Braindler
    for sphere in ["047", "048", "049"]:
        model_dir = os.path.join(base_dir, f"sphere_{sphere}_braindler_final_model")
        if os.path.exists(model_dir):
            models.append({
                "dir": model_dir,
                "name": f"braindler-sphere-{sphere}",
                "sphere": sphere,
                "model_name": "Braindler"
            })
    
    # Mozgach
    for sphere in ["047", "048", "049"]:
        model_dir = os.path.join(base_dir, f"sphere_{sphere}_mozgach_full_trained_model")
        if os.path.exists(model_dir):
            models.append({
                "dir": model_dir,
                "name": f"mozgach108-sphere-{sphere}",
                "sphere": sphere,
                "model_name": "Mozgach108"
            })
    
    if not models:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
    for m in models:
        print(f"   - {m['model_name']} –°—Ñ–µ—Ä–∞ {m['sphere']}")
    print()
    
    # –ü—É–±–ª–∏–∫—É–µ–º
    results = []
    for i, m in enumerate(models):
        print(f"\n[{i+1}/{len(models)}] {m['model_name']} –°—Ñ–µ—Ä–∞ {m['sphere']}")
        print("-"*80)
        
        success = publish_to_ollama(
            model_dir=m['dir'],
            model_name=m['name'],
            sphere=m['sphere'],
            base_ollama_model=base_ollama_model
        )
        
        results.append({
            "model": f"{m['model_name']} {m['sphere']}",
            "name": m['name'],
            "success": success
        })
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*80}")
    print("üìä –ò—Ç–æ–≥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Ollama")
    print(f"{'='*80}")
    
    for r in results:
        status = "‚úÖ" if r['success'] else "‚ùå"
        print(f"{status} {r['model']}: ollama run {r['name']}")
    
    success_count = sum(1 for r in results if r['success'])
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {success_count}/{len(results)}")
    
    if success_count == len(results):
        print("\nüéâ –í—Å–µ –º–æ–¥–µ–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ Ollama!")
        print("‚öñÔ∏è  –ò—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–∞! üïâÔ∏è  –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ Ollama"
    )
    parser.add_argument(
        "--model-dir",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—å—é"
    )
    parser.add_argument(
        "--model-name",
        help="–ò–º—è –º–æ–¥–µ–ª–∏ –≤ Ollama"
    )
    parser.add_argument(
        "--sphere",
        choices=["047", "048", "049"],
        help="–ù–æ–º–µ—Ä —Å—Ñ–µ—Ä—ã"
    )
    parser.add_argument(
        "--base-model",
        default="llama2:7b",
        help="–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Ollama (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: llama2:7b)"
    )
    parser.add_argument(
        "--all",
        action="store_true",
        help="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"
    )
    parser.add_argument(
        "--base-dir",
        default="../models",
        help="–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏"
    )
    
    args = parser.parse_args()
    
    if args.all:
        publish_all_spheres_ollama(
            base_dir=args.base_dir,
            base_ollama_model=args.base_model
        )
    elif args.model_dir and args.model_name and args.sphere:
        publish_to_ollama(
            model_dir=args.model_dir,
            model_name=args.model_name,
            sphere=args.sphere,
            base_ollama_model=args.base_model
        )
    else:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ --all, –ª–∏–±–æ --model-dir, --model-name –∏ --sphere")
        parser.print_help()

