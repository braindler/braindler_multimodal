#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–≤–Ω–æ 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã —á–µ—Ä–µ–∑ Ollama

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

–î—É—Ö–æ–≤–Ω–æ–µ —á–∏—Å–ª–æ: 108 –ø—Ä–∏–º–µ—Ä–æ–≤ √ó 4 —Å—Ñ–µ—Ä—ã + 1080 Alpaca = 1512 –ø—Ä–∏–º–µ—Ä–æ–≤

¬© 2025 NativeMind - NativeMindNONC License
"""

import json
import os
import subprocess
from pathlib import Path

def call_ollama(prompt, model="nativemind/mozgach108-light:latest"):
    """–í—ã–∑—ã–≤–∞–µ—Ç Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        result = subprocess.run(
            ["/opt/homebrew/bin/ollama", "run", model, prompt],
            capture_output=True,
            text=True,
            timeout=30
        )
        return result.stdout.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def generate_sphere_001_spiritual(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (–°—Ñ–µ—Ä–∞ 001)"""
    print("\nüïâÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 001: –î–£–•–û–í–ù–ê–Ø (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    spiritual_prompts = [
        "–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω—ã –≤ –¥—É—Ö–æ–≤–Ω–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏",
        "–ö–∞–∫ —Å–ª—É–∂–∏—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ —Å –¥—É—Ö–æ–≤–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è",
        "–í —á–µ–º –¥—É—Ö–æ–≤–Ω—ã–π —Å–º—ã—Å–ª –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏",
        "–û–±—ä—è—Å–Ω–∏ –∫–∞—Ä–º—É –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
        "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –∏—Å—Ç–∏–Ω–∞ –≤ –í–µ–¥–∞—Ö",
        "–ö–∞–∫ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –∑–∞–∫–æ–Ω–æ–º",
        "–û–±—ä—è—Å–Ω–∏ –î—Ö–∞—Ä–º—É –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –°–∞—Ç–≤–∞ –≤ —Å–ª—É–∂–µ–Ω–∏–∏ –∏—Å—Ç–∏–Ω–µ",
        "–ö–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç —Å—É–¥—å—è–º",
        "–û–±—ä—è—Å–Ω–∏ –ê—Ö–∏–º—Å—É –≤ –ø—Ä–∞–≤–æ—Å—É–¥–∏–∏"
    ]
    
    examples = []
    
    for i in range(target_count):
        prompt_template = spiritual_prompts[i % len(spiritual_prompts)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        response = call_ollama(f"{prompt_template}. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        
        examples.append({
            "instruction": prompt_template,
            "input": "",
            "output": response,
            "sphere": "001",
            "role": "spiritual",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 001: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_047_investigator(base_texts, target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –°–õ–ï–î–û–í–ê–¢–ï–õ–Ø (–°—Ñ–µ—Ä–∞ 047)"""
    print("\nüîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 047: –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
        "–û—Ü–µ–Ω–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª—è",
        "–ü—Ä–æ–≤–µ—Ä—å –∞–ª–∏–±–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ",
        "–°–æ—Å—Ç–∞–≤—å –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–æ–ø—Ä–æ—Å–∞",
        "–û—Ü–µ–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
        "–ù–∞–π–¥–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö",
        "–ü—Ä–æ–≤–µ—Ä—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é —Å–æ–±—ã—Ç–∏–π",
        "–û—Ü–µ–Ω–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —É–ª–∏–∫",
        "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
        "–û—Ü–µ–Ω–∏ –ø–æ–ª–Ω–æ—Ç—É —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        
        # –ë–µ—Ä–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if base_texts and i < len(base_texts):
            context = base_texts[i]['input'][:500]
        else:
            context = f"–î–æ–∫—É–º–µ–Ω—Ç #{i+1} –ø–æ —É–≥–æ–ª–æ–≤–Ω–æ–º—É –¥–µ–ª—É"
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ (–°—Ñ–µ—Ä–∞ 047). 
        
–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ë–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

–ó–∞–¥–∞—á–∞: {template}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - –°–õ–ï–î–û–í–ê–¢–ï–õ–¨. {template}",
            "input": context,
            "output": response,
            "sphere": "047",
            "role": "sphere_047_investigator",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 047: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_048_prosecutor(base_texts, target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –ü–†–û–ö–£–†–û–†–ê (–°—Ñ–µ—Ä–∞ 048) - –ö–õ–Æ–ß–ï–í–ê–Ø!"""
    print("\n‚öñÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 048: –ü–†–û–ö–£–†–û–† (108 –ø—Ä–∏–º–µ—Ä–æ–≤) - –ö–õ–Æ–ß–ï–í–ê–Ø!")
    
    prompts_templates = [
        "–û–±–Ω–∞—Ä—É–∂—å –∫–æ–ø–∏–ø–∞—Å—Ç –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
        "–ü—Ä–æ–≤–µ—Ä—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞",
        "–ù–∞–π–¥–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞",
        "–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–¥–∑–æ—Ä–∞ –∑–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º",
        "–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å –æ–±–≤–∏–Ω–µ–Ω–∏—è",
        "–ù–∞–π–¥–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è",
        "–û—Ü–µ–Ω–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ–±–≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è",
        "–ü—Ä–æ–≤–µ—Ä—å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ",
        "–ù–∞–π–¥–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–µ–ª–∞",
        "–û—Ü–µ–Ω–∏ —Å–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        
        if base_texts and i < len(base_texts):
            context = base_texts[i]['input'][:500]
        else:
            context = f"–û–±–≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –¥–µ–ª—É ‚Ññ{i+1}"
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - –ü–†–û–ö–£–†–û–† (–°—Ñ–µ—Ä–∞ 048).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –∫–∞–∫ —Å–∏–º–ø—Ç–æ–º–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.

"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - —ç—Ç–æ —Å–∏–º–ø—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, 
—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Å—É–¥—å–±–∞–º –ª—é–¥–µ–π, –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ—Ä—Ä—É–ø—Ü–∏–∏."

–ó–∞–¥–∞—á–∞: {template}

–î–æ–∫—É–º–µ–Ω—Ç: {context}

–î–∞–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - –ü–†–û–ö–£–†–û–†. {template}",
            "input": context,
            "output": response,
            "sphere": "048",
            "role": "sphere_048_prosecutor",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 048: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_049_judge(base_texts, target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –°–£–î–¨–ò (–°—Ñ–µ—Ä–∞ 049)"""
    print("\n‚öñÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 049: –°–£–î–¨–Ø (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–í—ã–Ω–µ—Å–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "–û—Ü–µ–Ω–∏ –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Å–ª–µ–¥—Å—Ç–≤–∏—è",
        "–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        "–û—Ü–µ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
        "–í—ã–Ω–µ—Å–∏ –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –¥–µ–ª—É",
        "–û—Ü–µ–Ω–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤ —Å—Ç–æ—Ä–æ–Ω",
        "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å",
        "–û—Ü–µ–Ω–∏ —Å–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ –≤ –¥–µ–ª–µ",
        "–í—ã–Ω–µ—Å–∏ —Ä–µ—à–µ–Ω–∏–µ –æ –º–µ—Ä–µ –ø—Ä–µ—Å–µ—á–µ–Ω–∏—è",
        "–û—Ü–µ–Ω–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –æ–±–≤–∏–Ω–µ–Ω–∏—è"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        
        if base_texts and i < len(base_texts):
            context = base_texts[i]['input'][:500]
        else:
            context = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ ‚Ññ{i+1}"
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - –°–£–î–¨–Ø (–°—Ñ–µ—Ä–∞ 049).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –í—ã–Ω–µ—Å–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–∏–Ω—ã.

–ó–∞–¥–∞—á–∞: {template}

–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {context}

–î–∞–π —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - –°–£–î–¨–Ø. {template}",
            "input": context,
            "output": response,
            "sphere": "049",
            "role": "sphere_049_judge",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 049: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("="*80)
    print("üåü –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã")
    print("="*80)
    print()
    print("üôè –°–≤—è—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ 108 –≤ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    try:
        result = subprocess.run(["/opt/homebrew/bin/ollama", "version"], capture_output=True, text=True)
        print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω: {result.stdout.strip()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    legal_path = "../datasets/legal_case_viktor/legal_dataset.jsonl"
    base_texts = []
    
    if os.path.exists(legal_path):
        with open(legal_path, 'r', encoding='utf-8') as f:
            base_texts = [json.loads(line) for line in f]
        print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {len(base_texts)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    all_examples = []
    
    # –°—Ñ–µ—Ä–∞ 001: –î—É—Ö–æ–≤–Ω–∞—è (108)
    all_examples.extend(generate_sphere_001_spiritual(108))
    
    # –°—Ñ–µ—Ä–∞ 047: –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ (108)
    all_examples.extend(generate_sphere_047_investigator(base_texts, 108))
    
    # –°—Ñ–µ—Ä–∞ 048: –ü–†–û–ö–£–†–û–† (108)
    all_examples.extend(generate_sphere_048_prosecutor(base_texts, 108))
    
    # –°—Ñ–µ—Ä–∞ 049: –°–£–î–¨–Ø (108)
    all_examples.extend(generate_sphere_049_judge(base_texts, 108))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Alpaca (1080 –ª—É—á—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤)
    print("\nü¶ô –ó–∞–≥—Ä—É–∑–∫–∞ Alpaca (1080 –ø—Ä–∏–º–µ—Ä–æ–≤)...")
    alpaca_path = "/Volumes/MULTIMODAL/proj.datasets/alpaca_dataset/alpaca_data.json"
    
    with open(alpaca_path, 'r', encoding='utf-8') as f:
        alpaca_data = json.load(f)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    keywords = ['analyze', 'evaluate', 'review', 'compare', 'assess', 'examine']
    alpaca_filtered = [ex for ex in alpaca_data 
                       if any(kw in ex['instruction'].lower() for kw in keywords)][:1080]
    
    for ex in alpaca_filtered:
        all_examples.append({
            "instruction": ex['instruction'],
            "input": ex.get('input', ''),
            "output": ex['output'],
            "sphere": "general",
            "role": "general",
            "source": "alpaca"
        })
    
    print(f"   ‚úÖ Alpaca: {len(alpaca_filtered)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    output_path = "../datasets/legal_108_perfect.jsonl"
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    with open(output_path, 'w', encoding='utf-8') as f:
        for ex in all_examples:
            f.write(json.dumps(ex, ensure_ascii=False) + '\n')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "total": len(all_examples),
        "distribution": {
            "001_spiritual": len([e for e in all_examples if e['sphere'] == '001']),
            "047_investigator": len([e for e in all_examples if e['sphere'] == '047']),
            "048_prosecutor": len([e for e in all_examples if e['sphere'] == '048']),
            "049_judge": len([e for e in all_examples if e['sphere'] == '049']),
            "general_alpaca": len([e for e in all_examples if e['sphere'] == 'general'])
        }
    }
    
    stats_path = output_path.replace('.jsonl', '_stats.json')
    with open(stats_path, 'w', encoding='utf-8') as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    print()
    print("="*80)
    print("‚úÖ –î–ê–¢–ê–°–ï–¢ –ì–û–¢–û–í!")
    print("="*80)
    print()
    print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (—Å–≤—è—â–µ–Ω–Ω–æ–µ 108):")
    for sphere, count in stats['distribution'].items():
        print(f"   {sphere}: {count}")
    print()
    print(f"üì¶ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats['total']}")
    print()
    print("üôè 108 - —Å–≤—è—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ!")
    print("‚öñÔ∏è  –ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é!")

if __name__ == "__main__":
    main()

