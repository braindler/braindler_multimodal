#!/bin/bash
#
# –ü–æ–ª–Ω—ã–π pipeline —Ñ–∞–π–Ω—Ç—é–Ω–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
#
# –®–∞–≥–∏:
# 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ 107 —Ç–æ–º–æ–≤
# 2. –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ 6 –º–æ–¥–µ–ª–µ–π (Braindler x3 + Mozgach x3)
# 3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ HuggingFace
# 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Ollama
#
# ¬© 2025 NativeMind - NativeMindNONC License

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "================================================================================"
echo "‚öñÔ∏è  –ü–û–õ–ù–´–ô PIPELINE: –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π"
echo "================================================================================"
echo ""
echo "üôè –î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ —á–µ—Ä–µ–∑ AI"
echo ""
echo "üìã –≠—Ç–∞–ø—ã:"
echo "   1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ (107 —Ç–æ–º–æ–≤)"
echo "   2. –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ Braindler: –°—Ñ–µ—Ä—ã 047, 048, 049"
echo "   3. –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ Mozgach108: –°—Ñ–µ—Ä—ã 047, 048, 049"
echo "   4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ HuggingFace"
echo "   5. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Ollama"
echo ""
read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
    exit 1
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
cd "$(dirname "$0")/.."
source venv/bin/activate

# ===============================================================================
# –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
# ===============================================================================
echo ""
echo "================================================================================"
echo "üìö –≠–¢–ê–ü 1/5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"
echo "================================================================================"
echo ""

if [ -f "datasets/legal_case_viktor/legal_dataset.jsonl" ]; then
    read -p "–î–∞—Ç–∞—Å–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        python finetune/prepare_legal_dataset.py --pages 10
    fi
else
    python finetune/prepare_legal_dataset.py --pages 10
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω
if [ ! -f "datasets/legal_case_viktor/legal_dataset.jsonl" ]; then
    echo "‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω!"
    exit 1
fi

echo "‚úÖ –î–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤"

# ===============================================================================
# –≠–¢–ê–ü 2: –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ Braindler (–°—Ñ–µ—Ä—ã 047, 048, 049)
# ===============================================================================
echo ""
echo "================================================================================"
echo "üî• –≠–¢–ê–ü 2/5: –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ Braindler (3 —Å—Ñ–µ—Ä—ã)"
echo "================================================================================"
echo ""

BASE_MODEL_BRAINDLER="nativemind/braindler_final_model"

for SPHERE in 047 048 049; do
    echo ""
    echo "--------------------------------------------------------------------------------"
    echo "‚öñÔ∏è  Braindler –°—Ñ–µ—Ä–∞ $SPHERE"
    echo "--------------------------------------------------------------------------------"
    
    OUTPUT_DIR="models/sphere_${SPHERE}_braindler"
    
    if [ -d "$OUTPUT_DIR" ]; then
        echo "‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $OUTPUT_DIR"
        read -p "–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º..."
            continue
        fi
    fi
    
    python finetune/finetune_sphere.py \
        --sphere "$SPHERE" \
        --base-model "$BASE_MODEL_BRAINDLER" \
        --dataset "datasets/legal_case_viktor/legal_dataset.jsonl" \
        --output "$OUTPUT_DIR" \
        --epochs 3 \
        --batch-size 2 \
        --learning-rate 2e-4
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Braindler –°—Ñ–µ—Ä–∞ $SPHERE –æ–±—É—á–µ–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è Braindler –°—Ñ–µ—Ä–∞ $SPHERE"
        exit 1
    fi
done

# ===============================================================================
# –≠–¢–ê–ü 3: –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ Mozgach108 (–°—Ñ–µ—Ä—ã 047, 048, 049)
# ===============================================================================
echo ""
echo "================================================================================"
echo "üî• –≠–¢–ê–ü 3/5: –§–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ Mozgach108 (3 —Å—Ñ–µ—Ä—ã)"
echo "================================================================================"
echo ""

BASE_MODEL_MOZGACH="nativemind/mozgach_full_trained_model"

for SPHERE in 047 048 049; do
    echo ""
    echo "--------------------------------------------------------------------------------"
    echo "‚öñÔ∏è  Mozgach108 –°—Ñ–µ—Ä–∞ $SPHERE"
    echo "--------------------------------------------------------------------------------"
    
    OUTPUT_DIR="models/sphere_${SPHERE}_mozgach"
    
    if [ -d "$OUTPUT_DIR" ]; then
        echo "‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $OUTPUT_DIR"
        read -p "–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º..."
            continue
        fi
    fi
    
    python finetune/finetune_sphere.py \
        --sphere "$SPHERE" \
        --base-model "$BASE_MODEL_MOZGACH" \
        --dataset "datasets/legal_case_viktor/legal_dataset.jsonl" \
        --output "$OUTPUT_DIR" \
        --epochs 3 \
        --batch-size 2 \
        --learning-rate 2e-4
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Mozgach108 –°—Ñ–µ—Ä–∞ $SPHERE –æ–±—É—á–µ–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è Mozgach108 –°—Ñ–µ—Ä–∞ $SPHERE"
        exit 1
    fi
done

# ===============================================================================
# –≠–¢–ê–ü 4: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ HuggingFace
# ===============================================================================
echo ""
echo "================================================================================"
echo "üì§ –≠–¢–ê–ü 4/5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ HuggingFace"
echo "================================================================================"
echo ""

read -p "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ HuggingFace? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    python finetune/publish_to_huggingface.py --all --base-dir models
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ú–æ–¥–µ–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –Ω–∞ HuggingFace"
    else
        echo "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ HuggingFace"
    fi
else
    echo "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º HuggingFace"
fi

# ===============================================================================
# –≠–¢–ê–ü 5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Ollama
# ===============================================================================
echo ""
echo "================================================================================"
echo "üì§ –≠–¢–ê–ü 5/5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Ollama"
echo "================================================================================"
echo ""

read -p "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Ollama? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    python finetune/publish_to_ollama.py --all --base-dir models
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ú–æ–¥–µ–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ Ollama"
    else
        echo "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Ollama"
    fi
else
    echo "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º Ollama"
fi

# ===============================================================================
# –§–ò–ù–ê–õ
# ===============================================================================
echo ""
echo "================================================================================"
echo "üéâ PIPELINE –ó–ê–í–ï–†–®–ï–ù!"
echo "================================================================================"
echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
echo ""
echo "Braindler –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π:"
echo "  ‚úÖ –°—Ñ–µ—Ä–∞ 047 (–°–õ–ï–î–û–í–ê–¢–ï–õ–¨)"
echo "  ‚úÖ –°—Ñ–µ—Ä–∞ 048 (–ü–†–û–ö–£–†–û–†)"
echo "  ‚úÖ –°—Ñ–µ—Ä–∞ 049 (–°–£–î–¨–Ø)"
echo ""
echo "Mozgach108 –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π:"
echo "  ‚úÖ –°—Ñ–µ—Ä–∞ 047 (–°–õ–ï–î–û–í–ê–¢–ï–õ–¨)"
echo "  ‚úÖ –°—Ñ–µ—Ä–∞ 048 (–ü–†–û–ö–£–†–û–†)"
echo "  ‚úÖ –°—Ñ–µ—Ä–∞ 049 (–°–£–î–¨–Ø)"
echo ""
echo "üì¶ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: 6"
echo ""
echo "üîó HuggingFace:"
echo "   https://huggingface.co/nativemind/braindler-multimodal-sphere-047"
echo "   https://huggingface.co/nativemind/braindler-multimodal-sphere-048"
echo "   https://huggingface.co/nativemind/braindler-multimodal-sphere-049"
echo "   https://huggingface.co/nativemind/mozgach108-multimodal-sphere-047"
echo "   https://huggingface.co/nativemind/mozgach108-multimodal-sphere-048"
echo "   https://huggingface.co/nativemind/mozgach108-multimodal-sphere-049"
echo ""
echo "ü§ñ Ollama:"
echo "   ollama run braindler-sphere-047"
echo "   ollama run braindler-sphere-048"
echo "   ollama run braindler-sphere-049"
echo "   ollama run mozgach108-sphere-047"
echo "   ollama run mozgach108-sphere-048"
echo "   ollama run mozgach108-sphere-049"
echo ""
echo "‚öñÔ∏è  –ò—Å—Ç–∏–Ω–∞ –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–∞! üïâÔ∏è  –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!"
echo ""

