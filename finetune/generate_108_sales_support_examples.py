#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–≤–Ω–æ 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è Sales & Support —á–µ—Ä–µ–∑ Ollama

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
–¥–ª—è –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤

–î—É—Ö–æ–≤–Ω–æ–µ —á–∏—Å–ª–æ: 108 –ø—Ä–∏–º–µ—Ä–æ–≤ √ó 8 —Å—Ñ–µ—Ä + 1080 Alpaca = 1944 –ø—Ä–∏–º–µ—Ä–∞

¬© 2025 NativeMind - NativeMindNONC License
"""

import json
import os
import subprocess
from pathlib import Path

def _ollama_bin():
    return os.environ.get("OLLAMA_BIN", "/opt/homebrew/bin/ollama")

def call_ollama(prompt, model="mozgach108:latest"):
    """–í—ã–∑—ã–≤–∞–µ—Ç Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        selected_model = os.environ.get("OLLAMA_MODEL", model)
        result = subprocess.run(
            [_ollama_bin(), "run", selected_model, prompt],
            capture_output=True,
            text=True,
            timeout=120
        )
        stdout = (result.stdout or "").strip()
        stderr = (result.stderr or "").strip()
        if result.returncode != 0:
            return f"–û—à–∏–±–∫–∞ ollama (code {result.returncode}): {stderr or stdout}"
        return stdout or stderr
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def generate_sphere_001_spiritual(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (–°—Ñ–µ—Ä–∞ 001)"""
    print("\nüïâÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 001: –î–£–•–û–í–ù–ê–Ø (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    spiritual_prompts = [
        "–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω—ã –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö",
        "–ö–∞–∫ —Å–ª—É–∂–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –¥—É—Ö–æ–≤–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è",
        "–í —á–µ–º –¥—É—Ö–æ–≤–Ω—ã–π —Å–º—ã—Å–ª —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤ –±–∏–∑–Ω–µ—Å–µ",
        "–û–±—ä—è—Å–Ω–∏ –∫–∞—Ä–º—É –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
        "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –∏—Å—Ç–∏–Ω–∞ –≤ –æ–±–µ—â–∞–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞–º",
        "–ö–∞–∫ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏",
        "–û–±—ä—è—Å–Ω–∏ –î—Ö–∞—Ä–º—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –°–∞—Ç–≤–∞ –≤ —Å–ª—É–∂–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞–º",
        "–ö–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö",
        "–û–±—ä—è—Å–Ω–∏ –ê—Ö–∏–º—Å—É –≤ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏"
    ]
    
    examples = []
    
    for i in range(target_count):
        prompt_template = spiritual_prompts[i % len(spiritual_prompts)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        response = call_ollama(f"{prompt_template}. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        
        examples.append({
            "instruction": prompt_template,
            "input": "",
            "output": response,
            "sphere": "001",
            "role": "spiritual",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 001: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_019_sales_manager(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ SALES MANAGER (–°—Ñ–µ—Ä–∞ 019)"""
    print("\nüíº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 019: SALES MANAGER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–í—ã—è–≤–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
        "–ó–∞–∫—Ä–æ–π –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ",
        "–ü—Ä–æ–≤–µ–¥–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ª–∏–¥–∞",
        "–°–æ—Å—Ç–∞–≤—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        "–ü—Ä–æ–≤–µ–¥–∏ —Ö–æ–ª–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫",
        "–ó–∞–∫—Ä–æ–π —Å–¥–µ–ª–∫—É",
        "–û–±—Ä–∞–±–æ—Ç–∞–π –æ—Ç–∫–∞–∑",
        "–í—ã—è–≤–∏ –±–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞",
        "–ü—Ä–µ–∑–µ–Ω—Ç—É–π –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Ü–µ–Ω–Ω–æ—Å—Ç—å",
        "–ó–∞–¥–∞–π SPIN-–≤–æ–ø—Ä–æ—Å—ã"
    ]
    
    client_situations = [
        "–ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç: '–î–æ—Ä–æ–≥–æ'",
        "–ö–ª–∏–µ–Ω—Ç: '–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å'",
        "–í—Ö–æ–¥—è—â–∏–π –ª–∏–¥ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ–≤–∞",
        "–ö–ª–∏–µ–Ω—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏",
        "–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
        "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–∫–∏–¥–∫—É 50%",
        "–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–∏—Å—å–º–∞",
        "–ö–ª–∏–µ–Ω—Ç: '–£ –Ω–∞—Å –Ω–µ—Ç –±—é–¥–∂–µ—Ç–∞'",
        "–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        "–ö–ª–∏–µ–Ω—Ç –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        situation = client_situations[i % len(client_situations)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - SALES MANAGER (–°—Ñ–µ—Ä–∞ 019).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –í—ã—è–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω–Ω–æ—Å—Ç—å.

–ó–∞–¥–∞—á–∞: {template}

–°–∏—Ç—É–∞—Ü–∏—è: {situation}

–î–∞–π —Ä–µ—à–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - SALES MANAGER. {template}",
            "input": situation,
            "output": response,
            "sphere": "019",
            "role": "sphere_019_sales_manager",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 019: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_020_account_manager(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ ACCOUNT MANAGER (–°—Ñ–µ—Ä–∞ 020)"""
    print("\nü§ù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 020: ACCOUNT MANAGER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü—Ä–æ–≤–µ–¥–∏ quarterly business review",
        "–ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è upsell",
        "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏ –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞",
        "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞",
        "–ü—Ä–æ–≤–µ–¥–∏ cross-sell",
        "–£–∫—Ä–µ–ø–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º",
        "–û–±—Ä–∞–±–æ—Ç–∞–π escalation",
        "–£–≤–µ–ª–∏—á—å lifetime value",
        "–ù–∞–π–¥–∏ –Ω–æ–≤—ã—Ö stakeholders",
        "–ü—Ä–æ–¥–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
    ]
    
    account_situations = [
        "–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ 20% —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
        "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü",
        "–ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º",
        "–£ –∫–ª–∏–µ–Ω—Ç–∞ —Å–º–µ–Ω–∏–ª—Å—è decision maker",
        "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ –∞—Ç–∞–∫—É–µ—Ç –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
        "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
        "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞",
        "–ö–ª–∏–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞",
        "–ù–∏–∑–∫–∏–π NPS –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
        "–ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        situation = account_situations[i % len(account_situations)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - ACCOUNT MANAGER (–°—Ñ–µ—Ä–∞ 020).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ.

–ó–∞–¥–∞—á–∞: {template}

–°–∏—Ç—É–∞—Ü–∏—è: {situation}

–î–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–∫–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - ACCOUNT MANAGER. {template}",
            "input": situation,
            "output": response,
            "sphere": "020",
            "role": "sphere_020_account_manager",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 020: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_021_presales_engineer(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ PRESALES ENGINEER (–°—Ñ–µ—Ä–∞ 021)"""
    print("\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 021: PRESALES ENGINEER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü—Ä–æ–≤–µ–¥–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é",
        "–ü–æ–¥–≥–æ—Ç–æ–≤—å –¥–µ–º–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
        "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω POC",
        "–û—Ç–≤–µ—Ç—å –Ω–∞ RFP/RFI",
        "–ü—Ä–æ–≤–µ–¥–∏ discovery —Å–µ—Å—Å–∏—é",
        "–ü–æ–¥–≥–æ—Ç–æ–≤—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
        "–û—Ü–µ–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é feasibility",
        "–°–æ—Å—Ç–∞–≤—å solution design",
        "–ü—Ä–æ–≤–µ–¥–∏ benchmark —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ü–æ–¥–≥–æ—Ç–æ–≤—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ROI"
    ]
    
    technical_requests = [
        "–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SAP",
        "–ù—É–∂–Ω–æ –¥–µ–º–æ –¥–ª—è CTO –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
        "–ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç on-premise —Ä–µ—à–µ–Ω–∏–µ",
        "–í–æ–ø—Ä–æ—Å –ø—Ä–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ 1M –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SOC2, ISO27001",
        "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º",
        "–ù—É–∂–Ω–æ –¥–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è",
        "–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ API –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é",
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ SLA 99.99%",
        "–í–æ–ø—Ä–æ—Å –ø—Ä–æ –º–∏–≥—Ä–∞—Ü–∏—é —Å legacy —Å–∏—Å—Ç–µ–º—ã"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        request = technical_requests[i % len(technical_requests)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - PRESALES ENGINEER (–°—Ñ–µ—Ä–∞ 021).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è.

–ó–∞–¥–∞—á–∞: {template}

–ó–∞–ø—Ä–æ—Å: {request}

–î–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ—Å–µ–π–ª–∑–∞ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - PRESALES ENGINEER. {template}",
            "input": request,
            "output": response,
            "sphere": "021",
            "role": "sphere_021_presales_engineer",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 021: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_022_business_developer(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ BUSINESS DEVELOPER (–°—Ñ–µ—Ä–∞ 022)"""
    print("\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 022: BUSINESS DEVELOPER (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ù–∞–π–¥–∏ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂",
        "–ü–æ—Å—Ç—Ä–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É",
        "–í—ã–π–¥–∏ –Ω–∞ –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫",
        "–ù–∞–π–¥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤",
        "–°–æ—Å—Ç–∞–≤—å go-to-market —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        "–û—Ü–µ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞",
        "–ü–æ–¥–≥–æ—Ç–æ–≤—å pitch –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
        "–ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è M&A",
        "–ü–æ—Å—Ç—Ä–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É",
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –Ω–æ–≤—É—é –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å"
    ]
    
    business_contexts = [
        "–†—ã–Ω–æ–∫ B2B SaaS –Ω–∞—Å—ã—â–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏",
        "–ï—Å—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ —ç–∫—Å–ø–∞–Ω—Å–∏—é –≤ –ï–≤—Ä–æ–ø—É",
        "–ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å MRR –≤ 3 —Ä–∞–∑–∞ –∑–∞ –≥–æ–¥",
        "–ü–æ—è–≤–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—Ä—É–ø–Ω–æ–≥–æ enterprise",
        "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤—ã—à–ª–∏ –Ω–∞ —Å–º–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫",
        "–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º",
        "–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã —Ç—Ä–µ–±—É—é—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞",
        "–ü–æ—è–≤–∏–ª–∞—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
        "–ü–∞–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤",
        "–ö–ª–∏–µ–Ω—Ç—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        context = business_contexts[i % len(business_contexts)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - BUSINESS DEVELOPER (–°—Ñ–µ—Ä–∞ 022).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞.

–ó–∞–¥–∞—á–∞: {template}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–î–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±–∏–∑–Ω–µ—Å-–¥–µ–≤–µ–ª–æ–ø–µ—Ä–∞ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - BUSINESS DEVELOPER. {template}",
            "input": context,
            "output": response,
            "sphere": "022",
            "role": "sphere_022_business_developer",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 022: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_023_customer_support(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ CUSTOMER SUPPORT (–°—Ñ–µ—Ä–∞ 023)"""
    print("\nüí¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 023: CUSTOMER SUPPORT (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü–æ–º–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç—É —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
        "–û–±—Ä–∞–±–æ—Ç–∞–π –∂–∞–ª–æ–±—É –∫–ª–∏–µ–Ω—Ç–∞",
        "–û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è",
        "–£—Å–ø–æ–∫–æ–π —Ä–∞–∑–æ–∑–ª—ë–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
        "–≠—Å–∫–∞–ª–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "–ù–∞–π–¥–∏ —Ä–µ—à–µ–Ω–∏–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π",
        "–°–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞",
        "–ü–æ–º–æ–≥–∏ —Å onboarding",
        "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É",
        "–û–±—Ä–∞–±–æ—Ç–∞–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç"
    ]
    
    support_tickets = [
        "–ö–ª–∏–µ–Ω—Ç: '–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —Å—Ä–æ—á–Ω–æ!'",
        "–ö–ª–∏–µ–Ω—Ç: '–≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ—Ä–Ω–∏—Ç–µ –¥–µ–Ω—å–≥–∏!'",
        "–ö–ª–∏–µ–Ω—Ç: '–ì–¥–µ –Ω–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö?'",
        "–ö–ª–∏–µ–Ω—Ç: '–¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å –∂–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏'",
        "–ö–ª–∏–µ–Ω—Ç: '–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–∏—Å–ª–∞ –ø–æ—Å—Ä–µ–¥–∏ —Ä–∞–±–æ—Ç—ã'",
        "–ö–ª–∏–µ–Ω—Ç: '–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º'",
        "–ö–ª–∏–µ–Ω—Ç: '–£–¥–∞–ª–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—à–∏–±–∫–µ, –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?'",
        "–ö–ª–∏–µ–Ω—Ç: '–ü–æ—á–µ–º—É —Å–ø–∏—Å–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –¥–≤–∞–∂–¥—ã?'",
        "–ö–ª–∏–µ–Ω—Ç: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'",
        "–ö–ª–∏–µ–Ω—Ç: '–ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ —ç—Ç–æ—Ç –±–∞–≥?'"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        ticket = support_tickets[i % len(support_tickets)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - CUSTOMER SUPPORT (–°—Ñ–µ—Ä–∞ 023).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –∑–∞–±–æ—Ç–æ–π.

–ó–∞–¥–∞—á–∞: {template}

–¢–∏–∫–µ—Ç: {ticket}

–î–∞–π –æ—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - CUSTOMER SUPPORT. {template}",
            "input": ticket,
            "output": response,
            "sphere": "023",
            "role": "sphere_023_customer_support",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 023: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_024_technical_support(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ TECHNICAL SUPPORT (–°—Ñ–µ—Ä–∞ 024)"""
    print("\nüîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 024: TECHNICAL SUPPORT (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏ –æ—à–∏–±–∫–∏",
        "–ü–æ–º–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é",
        "–ù–∞–π–¥–∏ –ø—Ä–∏—á–∏–Ω—É performance issue",
        "–ü–æ–º–æ–≥–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã",
        "–†–∞–∑–±–µ—Ä–∏ —Å–ª–æ–∂–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å",
        "–ü–æ–º–æ–≥–∏ —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö",
        "–û—Ç–ª–∞–¥—å –ø—Ä–æ–±–ª–µ–º—É –≤ production",
        "–ü–æ–º–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSO",
        "–†–∞–∑–±–µ—Ä–∏ –ø—Ä–æ–±–ª–µ–º—É —Å API",
        "–ü–æ–º–æ–≥–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã"
    ]
    
    technical_issues = [
        "Error 500 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–æ–ª—å—à–µ 10MB",
        "API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 429 Too Many Requests",
        "Webhook –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ production",
        "–ó–∞–ø—Ä–æ—Å—ã –∫ –ë–î –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è 30+ —Å–µ–∫—É–Ω–¥",
        "SAML SSO –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Azure AD",
        "WebSocket connection –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥—Ä–æ–ø–∞–µ—Ç—Å—è",
        "–ò–º–ø–æ—Ä—Ç 100K –∑–∞–ø–∏—Å–µ–π –∑–∞–Ω–∏–º–∞–µ—Ç 6 —á–∞—Å–æ–≤",
        "CORS –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö —Å frontend",
        "Memory leak –≤ –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö",
        "Rate limiting –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        issue = technical_issues[i % len(technical_issues)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - TECHNICAL SUPPORT (–°—Ñ–µ—Ä–∞ 024).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ì–ª—É–±–æ–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.

–ó–∞–¥–∞—á–∞: {template}

–ü—Ä–æ–±–ª–µ–º–∞: {issue}

–î–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - TECHNICAL SUPPORT. {template}",
            "input": issue,
            "output": response,
            "sphere": "024",
            "role": "sphere_024_technical_support",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 024: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_025_customer_success(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ CUSTOMER SUCCESS (–°—Ñ–µ—Ä–∞ 025)"""
    print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 025: CUSTOMER SUCCESS (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–ü—Ä–æ–≤–µ–¥–∏ onboarding –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
        "–£–≤–µ–ª–∏—á—å product adoption",
        "–î–æ–∫–∞–∂–∏ ROI –∫–ª–∏–µ–Ω—Ç—É",
        "–ü—Ä–æ–≤–µ–¥–∏ success planning —Å–µ—Å—Å–∏—é",
        "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏ churn",
        "–û–±—É—á–∏ –∫–æ–º–∞–Ω–¥—É –∫–ª–∏–µ–Ω—Ç–∞",
        "–ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è expansion",
        "–£–ª—É—á—à–∏ health score –∫–ª–∏–µ–Ω—Ç–∞",
        "–ü—Ä–æ–≤–µ–¥–∏ check-in call",
        "–ü–æ–º–æ–≥–∏ –¥–æ—Å—Ç–∏—á—å success milestones"
    ]
    
    customer_situations = [
        "–ö–ª–∏–µ–Ω—Ç 3 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 10% —Ñ—É–Ω–∫—Ü–∏–π",
        "NPS = 4, –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤–∏–¥–∏—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
        "–ö–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç–∏–≥ initial goals, —á—Ç–æ –¥–∞–ª—å—à–µ?",
        "Red health score: –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "–ö–ª–∏–µ–Ω—Ç –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞",
        "–ö–æ–º–∞–Ω–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –æ–±—É—á–µ–Ω–∏–µ",
        "–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç case study –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
        "Expansion opportunity: –Ω–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç",
        "–ö–ª–∏–µ–Ω—Ç –º–µ—Å—è—Ü –Ω–µ –ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º—É",
        "Renewal —á–µ—Ä–µ–∑ 60 –¥–Ω–µ–π, –Ω–µ—Ç engagement"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        situation = customer_situations[i % len(customer_situations)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - CUSTOMER SUCCESS MANAGER (–°—Ñ–µ—Ä–∞ 025).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –µ–≥–æ —Ü–µ–ª–µ–π.

–ó–∞–¥–∞—á–∞: {template}

–°–∏—Ç—É–∞—Ü–∏—è: {situation}

–î–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é CSM (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - CUSTOMER SUCCESS. {template}",
            "input": situation,
            "output": response,
            "sphere": "025",
            "role": "sphere_025_customer_success",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 025: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_026_solution_architect(target_count=108):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ SOLUTION ARCHITECT (–°—Ñ–µ—Ä–∞ 026)"""
    print("\nüèõÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –°—Ñ–µ—Ä—ã 026: SOLUTION ARCHITECT (108 –ø—Ä–∏–º–µ—Ä–æ–≤)")
    
    prompts_templates = [
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "–°–æ—Å—Ç–∞–≤—å implementation roadmap",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É",
        "–°–æ—Å—Ç–∞–≤—å best practices guide",
        "–û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∫–ª–∏–µ–Ω—Ç–∞",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
        "–°–æ—Å—Ç–∞–≤—å migration plan",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
    ]
    
    client_requirements = [
        "Enterprise –∫–ª–∏–µ–Ω—Ç: 10K –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
        "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å legacy —Å–∏—Å—Ç–µ–º—ã",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è multi-tenant —Ä–µ—à–µ–Ω–∏–µ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π",
        "–ö–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
        "–ù—É–∂–Ω–∞ offline-first –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è mobile",
        "–ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç high availability 99.99%",
        "–°–ª–æ–∂–Ω–∞—è —Å—Ö–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ä–æ–ª–µ–π",
        "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 15+ –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
        "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç hybrid cloud —Ä–µ—à–µ–Ω–∏–µ"
    ]
    
    examples = []
    
    for i in range(target_count):
        template = prompts_templates[i % len(prompts_templates)]
        requirement = client_requirements[i % len(client_requirements)]
        
        print(f"\r   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{target_count}...", end='', flush=True)
        
        full_prompt = f"""–¢—ã - SOLUTION ARCHITECT (–°—Ñ–µ—Ä–∞ 026).

–î—É—Ö–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –∑–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–∞, best practices.

–ó–∞–¥–∞—á–∞: {template}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirement}

–î–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):"""
        
        response = call_ollama(full_prompt)
        
        examples.append({
            "instruction": f"–¢—ã - SOLUTION ARCHITECT. {template}",
            "input": requirement,
            "output": response,
            "sphere": "026",
            "role": "sphere_026_solution_architect",
            "source": "synthetic_ollama"
        })
    
    print(f"\n   ‚úÖ –°—Ñ–µ—Ä–∞ 026: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("="*80)
    print("üåü –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 108 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è Sales & Support")
    print("="*80)
    print()
    print("üôè –°–≤—è—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ 108 –≤ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    try:
        result = subprocess.run([_ollama_bin(), "--version"], capture_output=True, text=True)
        ver = (result.stdout or result.stderr or "").strip()
        print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω: {ver}")
        print(f"üß† –ú–æ–¥–µ–ª—å: {os.environ.get('OLLAMA_MODEL', 'mozgach108:latest')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {e}")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    all_examples = []
    
    # –°—Ñ–µ—Ä–∞ 001: –î—É—Ö–æ–≤–Ω–∞—è (108)
    all_examples.extend(generate_sphere_001_spiritual(108))
    
    # –°—Ñ–µ—Ä–∞ 019: SALES MANAGER (108)
    all_examples.extend(generate_sphere_019_sales_manager(108))
    
    # –°—Ñ–µ—Ä–∞ 020: ACCOUNT MANAGER (108)
    all_examples.extend(generate_sphere_020_account_manager(108))
    
    # –°—Ñ–µ—Ä–∞ 021: PRESALES ENGINEER (108)
    all_examples.extend(generate_sphere_021_presales_engineer(108))
    
    # –°—Ñ–µ—Ä–∞ 022: BUSINESS DEVELOPER (108)
    all_examples.extend(generate_sphere_022_business_developer(108))
    
    # –°—Ñ–µ—Ä–∞ 023: CUSTOMER SUPPORT (108)
    all_examples.extend(generate_sphere_023_customer_support(108))
    
    # –°—Ñ–µ—Ä–∞ 024: TECHNICAL SUPPORT (108)
    all_examples.extend(generate_sphere_024_technical_support(108))
    
    # –°—Ñ–µ—Ä–∞ 025: CUSTOMER SUCCESS (108)
    all_examples.extend(generate_sphere_025_customer_success(108))
    
    # –°—Ñ–µ—Ä–∞ 026: SOLUTION ARCHITECT (108)
    all_examples.extend(generate_sphere_026_solution_architect(108))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Alpaca (1080 –ø—Ä–∏–º–µ—Ä–æ–≤)
    print("\nü¶ô –ó–∞–≥—Ä—É–∑–∫–∞ Alpaca (1080 –ø—Ä–∏–º–µ—Ä–æ–≤)...")
    alpaca_path = "/Volumes/MULTIMODAL/proj.datasets/alpaca_dataset/alpaca_data.json"
    
    if os.path.exists(alpaca_path):
        with open(alpaca_path, 'r', encoding='utf-8') as f:
            alpaca_data = json.load(f)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π
        keywords = ['sell', 'customer', 'client', 'persuade', 'negotiate', 'communicate',
                   'support', 'service', 'explain', 'convince', 'present', 'pitch']
        alpaca_filtered = [ex for ex in alpaca_data 
                          if any(kw in ex['instruction'].lower() for kw in keywords)][:1080]
        
        for ex in alpaca_filtered:
            all_examples.append({
                "instruction": ex['instruction'],
                "input": ex.get('input', ''),
                "output": ex['output'],
                "sphere": "general",
                "role": "general",
                "source": "alpaca"
            })
        
        print(f"   ‚úÖ Alpaca: {len(alpaca_filtered)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    else:
        print(f"   ‚ö†Ô∏è  Alpaca –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {alpaca_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ)
    base_dir = Path(__file__).resolve().parent.parent / "datasets"
    base_dir.mkdir(parents=True, exist_ok=True)
    output_path = str(base_dir / "sales_support_108_perfect.jsonl")
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    with open(output_path, 'w', encoding='utf-8') as f:
        for ex in all_examples:
            f.write(json.dumps(ex, ensure_ascii=False) + '\n')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "total": len(all_examples),
        "distribution": {
            "001_spiritual": len([e for e in all_examples if e['sphere'] == '001']),
            "019_sales_manager": len([e for e in all_examples if e['sphere'] == '019']),
            "020_account_manager": len([e for e in all_examples if e['sphere'] == '020']),
            "021_presales_engineer": len([e for e in all_examples if e['sphere'] == '021']),
            "022_business_developer": len([e for e in all_examples if e['sphere'] == '022']),
            "023_customer_support": len([e for e in all_examples if e['sphere'] == '023']),
            "024_technical_support": len([e for e in all_examples if e['sphere'] == '024']),
            "025_customer_success": len([e for e in all_examples if e['sphere'] == '025']),
            "026_solution_architect": len([e for e in all_examples if e['sphere'] == '026']),
            "general_alpaca": len([e for e in all_examples if e['sphere'] == 'general'])
        }
    }
    
    stats_path = output_path.replace('.jsonl', '_stats.json')
    with open(stats_path, 'w', encoding='utf-8') as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    print()
    print("="*80)
    print("‚úÖ –î–ê–¢–ê–°–ï–¢ –î–õ–Ø SALES & SUPPORT –ì–û–¢–û–í!")
    print("="*80)
    print()
    print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (—Å–≤—è—â–µ–Ω–Ω–æ–µ 108):")
    for sphere, count in stats['distribution'].items():
        print(f"   {sphere}: {count}")
    print()
    print(f"üì¶ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {stats['total']}")
    print()
    print("üôè 108 - —Å–≤—è—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!")
    print("üíº –ì–æ—Ç–æ–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Sales & Support!")

if __name__ == "__main__":
    main()



