#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è —Å—Ñ–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

¬© 2025 NativeMind - NativeMindNONC License
"""

import os
import time
import subprocess
import json
from datetime import datetime

def check_training_progress():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø –°–§–ï–† –†–ê–ó–†–ê–ë–û–¢–ö–ò")
    print("="*60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è
    try:
        result = subprocess.run(
            ["ps", "aux"], 
            capture_output=True, 
            text=True
        )
        
        training_processes = []
        for line in result.stdout.split('\n'):
            if 'finetune_developers_improved.py' in line:
                training_processes.append(line)
        
        if training_processes:
            print("üöÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è:")
            for process in training_processes:
                parts = process.split()
                pid = parts[1]
                sphere = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                for part in parts:
                    if '--sphere' in part:
                        idx = parts.index(part)
                        if idx + 1 < len(parts):
                            sphere = parts[idx + 1]
                        break
                print(f"   üìä PID {pid}: –°—Ñ–µ—Ä–∞ {sphere}")
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –º–æ–¥–µ–ª–µ–π
    models_dir = "../models_improved"
    if os.path.exists(models_dir):
        print("üìÅ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:")
        spheres = ["073", "074", "075", "076", "077", "078"]
        
        for sphere in spheres:
            sphere_dir = f"{models_dir}/sphere_{sphere}_improved"
            if os.path.exists(sphere_dir):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
                model_files = []
                for file in os.listdir(sphere_dir):
                    if file.endswith(('.bin', '.safetensors', '.json')):
                        model_files.append(file)
                
                if model_files:
                    status = "‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê"
                    print(f"   –°—Ñ–µ—Ä–∞ {sphere}: {status} ({len(model_files)} —Ñ–∞–π–ª–æ–≤)")
                else:
                    status = "üîÑ –û–ë–£–ß–ê–ï–¢–°–Ø"
                    print(f"   –°—Ñ–µ—Ä–∞ {sphere}: {status}")
            else:
                status = "‚è≥ –û–ñ–ò–î–ê–ù–ò–ï"
                print(f"   –°—Ñ–µ—Ä–∞ {sphere}: {status}")
        
        print()
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
        completed = 0
        for sphere in spheres:
            sphere_dir = f"{models_dir}/sphere_{sphere}_improved"
            if os.path.exists(sphere_dir):
                model_files = [f for f in os.listdir(sphere_dir) 
                             if f.endswith(('.bin', '.safetensors', '.json'))]
                if model_files:
                    completed += 1
        
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/6 —Å—Ñ–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({completed/6*100:.1f}%)")
        
    else:
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è models_improved –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print()
    
    try:
        while True:
            check_training_progress()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
