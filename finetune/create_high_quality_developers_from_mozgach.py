#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è —Å—Ñ–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (073-078)
–Ω–∞ –æ—Å–Ω–æ–≤–µ nativemind/mozgach_alpaca_gift

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤—É –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

¬© 2025 NativeMind - NativeMindNONC License
"""

import json
import os
import random
from datasets import load_dataset
from typing import List, Dict

def load_mozgach_dataset():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ mozgach_alpaca_gift"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ mozgach_alpaca_gift...")
    try:
        dataset = load_dataset("nativemind/mozgach_alpaca_gift", split="train")
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dataset)} –ø—Ä–∏–º–µ—Ä–æ–≤")
        return dataset
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

def create_developer_examples(base_dataset, sphere, count=200):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    sphere_configs = {
        "073": {
            "name": "DEVELOPER",
            "keywords": ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ñ—É–Ω–∫—Ü–∏—è", "–∞–ª–≥–æ—Ä–∏—Ç–º", "python", "javascript", "java", "git", "api"],
            "role_prompt": "### –†–æ–ª—å: Senior Python Developer\n### –ó–∞–¥–∞—á–∞: {instruction}\n### –†–µ—à–µ–Ω–∏–µ:",
            "examples": [
                "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
                "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–¥–∞",
                "–†–µ–∞–ª–∏–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –Ω–∞ Python",
                "–°–æ–∑–¥–∞–π REST API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flask"
            ]
        },
        "074": {
            "name": "CODE_REVIEWER", 
            "keywords": ["–∫–æ–¥", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–æ—à–∏–±–∫–∞", "–±–∞–≥", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
            "role_prompt": "### –†–æ–ª—å: Code Reviewer\n### –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {instruction}\n### –ê–Ω–∞–ª–∏–∑:",
            "examples": [
                "–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫",
                "–ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º –∫–æ–¥–µ",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–í—ã—è–≤–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
            ]
        },
        "075": {
            "name": "ARCHITECT",
            "keywords": ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "—Å–∏—Å—Ç–µ–º–∞", "–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã", "–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–∞—Ç—Ç–µ—Ä–Ω—ã", "–¥–∏–∑–∞–π–Ω", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"],
            "role_prompt": "### –†–æ–ª—å: System Architect\n### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {instruction}\n### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:",
            "examples": [
                "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤",
                "–°–æ–∑–¥–∞–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è 1M –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
                "–°–æ–∑–¥–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
            ]
        },
        "076": {
            "name": "DEVOPS",
            "keywords": ["devops", "ci/cd", "docker", "kubernetes", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"],
            "role_prompt": "### –†–æ–ª—å: DevOps Engineer\n### –ó–∞–¥–∞—á–∞: {instruction}\n### –†–µ—à–µ–Ω–∏–µ:",
            "examples": [
                "–ù–∞—Å—Ç—Ä–æ–π CI/CD pipeline –¥–ª—è Python –ø—Ä–æ–µ–∫—Ç–∞",
                "–°–æ–∑–¥–∞–π Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "–ù–∞—Å—Ç—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes",
                "–ù–∞—Å—Ç—Ä–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
            ]
        },
        "077": {
            "name": "QA_TESTER",
            "keywords": ["—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–µ—Å—Ç—ã", "qa", "–±–∞–≥", "–∫–∞—á–µ—Å—Ç–≤–æ", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–ø–æ–∫—Ä—ã—Ç–∏–µ", "–ø—Ä–æ–≤–µ—Ä–∫–∞"],
            "role_prompt": "### –†–æ–ª—å: QA Engineer\n### –ó–∞–¥–∞—á–∞: {instruction}\n### –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:",
            "examples": [
                "–ù–∞–ø–∏—à–∏ unit —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è API",
                "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI",
                "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏",
                "–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            ]
        },
        "078": {
            "name": "TECH_WRITER",
            "keywords": ["–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "readme", "api", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è", "–ø–∏—Å–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"],
            "role_prompt": "### –†–æ–ª—å: Technical Writer\n### –ó–∞–¥–∞—á–∞: {instruction}\n### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:",
            "examples": [
                "–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API",
                "–°–æ–∑–¥–∞–π README –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞",
                "–ù–∞–ø–∏—à–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "–°–æ–∑–¥–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                "–ù–∞–ø–∏—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
            ]
        }
    }
    
    config = sphere_configs[sphere]
    print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã {sphere}: {config['name']}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    relevant_examples = []
    for example in base_dataset:
        instruction = example.get('instruction', '').lower()
        output = example.get('output', '').lower()
        text = f"{instruction} {output}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(keyword in text for keyword in config['keywords']):
            relevant_examples.append(example)
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(relevant_examples)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏
    synthetic_examples = []
    if len(relevant_examples) < count:
        needed = count - len(relevant_examples)
        print(f"   üîß –°–æ–∑–¥–∞–Ω–∏–µ {needed} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")
        
        for i in range(needed):
            base_example = random.choice(base_dataset)
            synthetic_instruction = random.choice(config['examples'])
            
            synthetic_examples.append({
                "instruction": synthetic_instruction,
                "input": "",
                "output": base_example.get('output', ''),
                "sphere": sphere,
                "role": config['name'].lower(),
                "source": "synthetic_from_mozgach"
            })
    
    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã
    adapted_examples = []
    for example in relevant_examples[:count-len(synthetic_examples)]:
        adapted_examples.append({
            "instruction": example.get('instruction', ''),
            "input": example.get('input', ''),
            "output": example.get('output', ''),
            "sphere": sphere,
            "role": config['name'].lower(),
            "source": "mozgach_alpaca_gift"
        })
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    all_examples = adapted_examples + synthetic_examples
    random.shuffle(all_examples)
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return all_examples

def enhance_examples_with_role_prompts(examples, sphere):
    """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä–æ–ª–µ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    sphere_configs = {
        "073": "### –†–æ–ª—å: Senior Python Developer",
        "074": "### –†–æ–ª—å: Code Reviewer", 
        "075": "### –†–æ–ª—å: System Architect",
        "076": "### –†–æ–ª—å: DevOps Engineer",
        "077": "### –†–æ–ª—å: QA Engineer",
        "078": "### –†–æ–ª—å: Technical Writer"
    }
    
    role_prompt = sphere_configs[sphere]
    
    enhanced_examples = []
    for example in examples:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–µ–≤–æ–π –ø—Ä–æ–º–ø—Ç –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        enhanced_instruction = f"{role_prompt}\n### –ó–∞–¥–∞—á–∞:\n{example['instruction']}"
        
        enhanced_examples.append({
            "instruction": enhanced_instruction,
            "input": example.get('input', ''),
            "output": example['output'],
            "sphere": sphere,
            "role": example['role'],
            "source": example['source']
        })
    
    return enhanced_examples

def create_high_quality_dataset():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä"""
    print("==================================================================================")
    print("üåü –°–û–ó–î–ê–ù–ò–ï –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê –ù–ê –û–°–ù–û–í–ï MOZGACH_ALPACA_GIFT")
    print("==================================================================================")
    print()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    base_dataset = load_mozgach_dataset()
    if not base_dataset:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç!")
        return
    
    all_examples = []
    spheres = ["073", "074", "075", "076", "077", "078"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    for sphere in spheres:
        print(f"\n{'='*60}")
        print(f"üéØ –°–§–ï–†–ê {sphere}")
        print(f"{'='*60}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
        examples = create_developer_examples(base_dataset, sphere, count=200)
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —Å —Ä–æ–ª–µ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        enhanced_examples = enhance_examples_with_role_prompts(examples, sphere)
        
        all_examples.extend(enhanced_examples)
        print(f"‚úÖ –°—Ñ–µ—Ä–∞ {sphere}: {len(enhanced_examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    output_file = "../datasets/developers_high_quality_from_mozgach.jsonl"
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ {output_file}...")
    
    with open(output_file, "w", encoding="utf-8") as f:
        for example in all_examples:
            f.write(json.dumps(example, ensure_ascii=False) + "\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üìù –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(all_examples)}")
    
    sphere_counts = {}
    source_counts = {}
    
    for example in all_examples:
        sphere = example["sphere"]
        source = example["source"]
        sphere_counts[sphere] = sphere_counts.get(sphere, 0) + 1
        source_counts[source] = source_counts.get(source, 0) + 1
    
    print(f"\n   üéØ –ü–æ —Å—Ñ–µ—Ä–∞–º:")
    for sphere, count in sorted(sphere_counts.items()):
        print(f"      –°—Ñ–µ—Ä–∞ {sphere}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    print(f"\n   üìö –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    for source, count in sorted(source_counts.items()):
        print(f"      {source}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    print(f"\n‚úÖ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    print(f"üìÅ –§–∞–π–ª: {output_file}")
    print(f"üöÄ –ì–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π!")
    
    return output_file

def main():
    create_high_quality_dataset()

if __name__ == "__main__":
    main()
