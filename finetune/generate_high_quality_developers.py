#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è —Å—Ñ–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (073-078)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4/Claude –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
–≤–º–µ—Å—Ç–æ —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç Ollama

¬© 2025 NativeMind - NativeMindNONC License
"""

import json
import os
import requests
import time
from typing import List, Dict

def call_openai_api(prompt: str, model: str = "gpt-4") -> str:
    """–í—ã–∑–æ–≤ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à API –∫–ª—é—á OpenAI
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            return f"–û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": model,
            "messages": [
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π."},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 2000
        }
        
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def generate_sphere_073_developer() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã 073: DEVELOPER"""
    print("üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã 073: DEVELOPER")
    
    prompts = [
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –¥–ª—è Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏. –í–∫–ª—é—á–∏: –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –û–û–ü, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ Python (Django/Flask) —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Python —Å —Ä–µ—à–µ–Ω–∏—è–º–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Python –∫–æ–¥–∞.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á –ø–æ —Ä–∞–±–æ—Ç–µ —Å API –∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –Ω–∞ Python."
    ]
    
    examples = []
    for i, prompt in enumerate(prompts, 1):
        print(f"   üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ {i}/5...")
        response = call_openai_api(prompt)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        if "–û—à–∏–±–∫–∞" not in response:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            parts = response.split("###") if "###" in response else [response]
            for part in parts:
                if len(part.strip()) > 50:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
                    examples.append({
                        "instruction": f"–ó–∞–¥–∞—á–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {part.strip()[:100]}...",
                        "input": "",
                        "output": part.strip(),
                        "sphere": "073",
                        "role": "developer",
                        "source": "gpt4_high_quality"
                    })
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_074_code_reviewer() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã 074: CODE_REVIEWER"""
    print("üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã 074: CODE_REVIEWER")
    
    prompts = [
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ code review —Å –ø–ª–æ—Ö–∏–º –∫–æ–¥–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏. –í–∫–ª—é—á–∏: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–∏–π.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."
    ]
    
    examples = []
    for i, prompt in enumerate(prompts, 1):
        print(f"   üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ {i}/5...")
        response = call_openai_api(prompt)
        
        if "–û—à–∏–±–∫–∞" not in response:
            parts = response.split("###") if "###" in response else [response]
            for part in parts:
                if len(part.strip()) > 50:
                    examples.append({
                        "instruction": f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥: {part.strip()[:100]}...",
                        "input": "",
                        "output": part.strip(),
                        "sphere": "074",
                        "role": "code_reviewer",
                        "source": "gpt4_high_quality"
                    })
        
        time.sleep(1)
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_075_architect() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã 075: ARCHITECT"""
    print("üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã 075: ARCHITECT")
    
    prompts = [
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—á–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä (AWS, Azure, GCP).",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é."
    ]
    
    examples = []
    for i, prompt in enumerate(prompts, 1):
        print(f"   üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ {i}/5...")
        response = call_openai_api(prompt)
        
        if "–û—à–∏–±–∫–∞" not in response:
            parts = response.split("###") if "###" in response else [response]
            for part in parts:
                if len(part.strip()) > 50:
                    examples.append({
                        "instruction": f"–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: {part.strip()[:100]}...",
                        "input": "",
                        "output": part.strip(),
                        "sphere": "075",
                        "role": "architect",
                        "source": "gpt4_high_quality"
                    })
        
        time.sleep(1)
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_076_devops() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã 076: DEVOPS"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã 076: DEVOPS")
    
    prompts = [
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CI/CD pipeline —Å Docker, Jenkins, GitLab CI.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (Prometheus, Grafana, ELK).",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∫ –∫–æ–¥ (Terraform, Ansible).",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kubernetes –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ compliance –≤ DevOps."
    ]
    
    examples = []
    for i, prompt in enumerate(prompts, 1):
        print(f"   üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ {i}/5...")
        response = call_openai_api(prompt)
        
        if "–û—à–∏–±–∫–∞" not in response:
            parts = response.split("###") if "###" in response else [response]
            for part in parts:
                if len(part.strip()) > 50:
                    examples.append({
                        "instruction": f"–ù–∞—Å—Ç—Ä–æ–π DevOps: {part.strip()[:100]}...",
                        "input": "",
                        "output": part.strip(),
                        "sphere": "076",
                        "role": "devops",
                        "source": "gpt4_high_quality"
                    })
        
        time.sleep(1)
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_077_qa_tester() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã 077: QA_TESTER"""
    print("üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã 077: QA_TESTER")
    
    prompts = [
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è unit —Ç–µ—Å—Ç–æ–≤ –Ω–∞ Python (pytest, unittest) —Å –ø–æ–ª–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Selenium, Playwright.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ penetration testing."
    ]
    
    examples = []
    for i, prompt in enumerate(prompts, 1):
        print(f"   üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ {i}/5...")
        response = call_openai_api(prompt)
        
        if "–û—à–∏–±–∫–∞" not in response:
            parts = response.split("###") if "###" in response else [response]
            for part in parts:
                if len(part.strip()) > 50:
                    examples.append({
                        "instruction": f"–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã: {part.strip()[:100]}...",
                        "input": "",
                        "output": part.strip(),
                        "sphere": "077",
                        "role": "qa_tester",
                        "source": "gpt4_high_quality"
                    })
        
        time.sleep(1)
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def generate_sphere_078_tech_writer() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ñ–µ—Ä—ã 078: TECH_WRITER"""
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –°—Ñ–µ—Ä—ã 078: TECH_WRITER")
    
    prompts = [
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è API —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ README —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤.",
        "–°–æ–∑–¥–∞–π 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º."
    ]
    
    examples = []
    for i, prompt in enumerate(prompts, 1):
        print(f"   üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ {i}/5...")
        response = call_openai_api(prompt)
        
        if "–û—à–∏–±–∫–∞" not in response:
            parts = response.split("###") if "###" in response else [response]
            for part in parts:
                if len(part.strip()) > 50:
                    examples.append({
                        "instruction": f"–ù–∞–ø–∏—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: {part.strip()[:100]}...",
                        "input": "",
                        "output": part.strip(),
                        "sphere": "078",
                        "role": "tech_writer",
                        "source": "gpt4_high_quality"
                    })
        
        time.sleep(1)
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    return examples

def main():
    print("==================================================================================")
    print("üåü –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê –î–õ–Ø –°–§–ï–† –†–ê–ó–†–ê–ë–û–¢–ö–ò")
    print("==================================================================================")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export OPENAI_API_KEY='your-key'")
        return
    
    all_examples = []
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    spheres = [
        ("073", generate_sphere_073_developer),
        ("074", generate_sphere_074_code_reviewer),
        ("075", generate_sphere_075_architect),
        ("076", generate_sphere_076_devops),
        ("077", generate_sphere_077_qa_tester),
        ("078", generate_sphere_078_tech_writer)
    ]
    
    for sphere_num, generator_func in spheres:
        print(f"\n{'='*60}")
        print(f"üéØ –°–§–ï–†–ê {sphere_num}")
        print(f"{'='*60}")
        
        examples = generator_func()
        all_examples.extend(examples)
        
        print(f"‚úÖ –°—Ñ–µ—Ä–∞ {sphere_num}: {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    output_file = "../datasets/developers_high_quality.jsonl"
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ {output_file}...")
    
    with open(output_file, "w", encoding="utf-8") as f:
        for example in all_examples:
            f.write(json.dumps(example, ensure_ascii=False) + "\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üìù –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(all_examples)}")
    
    sphere_counts = {}
    for example in all_examples:
        sphere = example["sphere"]
        sphere_counts[sphere] = sphere_counts.get(sphere, 0) + 1
    
    for sphere, count in sorted(sphere_counts.items()):
        print(f"   üéØ –°—Ñ–µ—Ä–∞ {sphere}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    print(f"\n‚úÖ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω!")
    print(f"üìÅ –§–∞–π–ª: {output_file}")
    print(f"üöÄ –ì–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π!")

if __name__ == "__main__":
    main()
